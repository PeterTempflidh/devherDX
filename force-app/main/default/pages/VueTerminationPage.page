<!--
 - Created by w.novoa on 13.02.2018.
 -->

<apex:page id="VueTerminationPage" showHeader="false" standardStylesheets="false" sidebar="false"
           applyHtmlTag="false" applyBodyTag="false" docType="html-5.0" standardController="Account" extensions="CtrTerminationRestaurantVue">

    <html xmlns="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:v-once="http://vue/fake"
          xmlns:v-html="http://vue/fake"
          xmlns:v-bind="http://vue/fake"
          xmlns:v-if="http://vue/fake"
          xmlns:v-on="http://vue/fake"
          xmlns:v-model="http://vue/fake"
          xmlns:v-cloak="http://vue/fake">
        <head>
            <title></title>
            <apex:slds ></apex:slds>
            <apex:stylesheet value="{!$Resource.TerminationStyle}" />

            <style type="text/css">
            [v-cloak] {
                display: none !important;
            }


            </style>
        </head>
        <body v-cloak="">
        <div id="app" class="slds-scope" v-cloak="">
            <termination-section v-if="mpcontracts"
                                 v-bind:mpcontracts="mpcontracts"
                                 v-bind:mpaddcharges="mpaddcharges"
                                 v-bind:mpaddchargespp="mpaddchargesPP"
                                 v-bind:mpaddons="mpaddons"
                                 v-bind:mpbranding="mpbranding"
                                 v-bind:recordtypeid = "recordtypeid"
                                 v-bind:currencyaccount = "currencyaccount"
                                 v-on:reloadlist="loaddata"

            >


            </termination-section>

            <spinner v-bind:open="loaderState.state.isLoading"></spinner>
            <error-handler
                    v-bind:message="errorState.state.message"
                    v-bind:type="errorState.state.type"
                    v-bind:timeout="errorState.state.timeout"
                    v-bind:callback="errorState.state.callback"
                    v-on:closed="errorState.clearErrorMsg()">
            </error-handler>
            <message-handler
                    v-bind:message="msgState.state.message"
                    v-bind:type="msgState.state.type"
                    v-bind:timeout="msgState.state.timeout"
                    v-bind:callback="msgState.state.callback"
                    v-on:closed="msgState.clearMsg()">
            </message-handler>
        </div>

        <div id="datepicker-app">
            <div v-if="open">
                <input type="text" style="display: none" id="regular-date" v-model="currentValue"/>

                <transition name="calendar-fade">
                    <date-picker color="#54698d"
                                 v-on:close="closed"
                                 v-on:input="selected"
                                 v-model="currentValue"></date-picker>
                </transition>
            </div>
        </div>


        <script src="/support/console/35.0/integration.js"></script>
        <script src="{!URLFOR($Resource.moment,'')}"></script>
        <script src="{!URLFOR($Resource.momenttz ,'')}"></script>
        <script src="{!URLFOR($Resource.Vue)}"></script>
        <!--<script src="https://unpkg.com/vue@2.4.4/dist/vue.js"></script>-->
        <script src="{!URLFOR($Resource.DHHUiApiWrapper, 'js/UiApiWrapper.js')}"></script>

        <c:VueCommonComponents />
        <c:VueTerminationContract />

        <script src="{!URLFOR($Resource.vueDatePicker, '/vue-date-picker/vue-date-picker.min.js')}"></script>
        <script src="/support/console/38.0/integration.js" type="text/javascript"></script>
        <script src="{!URLFOR($Resource.DHHConsoleToolkit, 'js/ConsoleToolkit.js')}" type="text/javascript"></script>

        <script>
            var uiApi = new UiApiWrapper({
                baseUrl: window.location.protocol + '//' + window.location.hostname,
                version: "41.0",
                token: "{!$Api.Session_ID}"
            });
        </script>

        <script>

        // Initializes the Vue
            Vue.use(DatePicker);

                 function opennewtab(value){
                    var DHH = new DHHConsoleToolkit();
                    if (sforce.console.isInConsole()) {
                   	    DHH.openSubTabInCurrentTab("/"+value,"");
                    }else if((typeof sforce != 'undefined') && sforce && (!!sforce.one)){
                         sforce.one.navigateToSObject(value);
                    }else if(!sforce.one){
                            window.parent.location.href="/"+value;
                    }
                }

            var app = new Vue({
                  el: '#app',
                  data: {
		                  errorState: errorHandlerSharedState,
		                  msgState: messageHandlerSharedState,
                          accountid: "{!Account.Id}",
                          recordtypeid:"{!Account.RecordTypeId}",
                          currencyaccount :"{!Account.CurrencyIsoCode}",
                          loaderState: loaderSharedState,
                          mpcontracts : undefined,
                          mpaddcharges : undefined,
                          mpaddchargesPP : undefined,
                          mpaddons : undefined,
                          mpbranding : undefined,
                    },
                     methods: {
                            loaddata: function() {
                               var self = this;
                               self.loaderState.startLoadingSpinner();
                               self.mpcontracts = undefined;
                               Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.CtrTerminationRestaurantVue.getActiveContracts}',
                                    this.accountid,
                                    function(result, event) {
                                        self.loaderState.stopLoadingSpinner();

                                        if (!event.status || !result) {
                                            self.errorState.setErrorMsg({
                                                msg: "Impossible to load contracts: " + event.message,
                                                type: "error"
                                            });
                                            return;
                                        }


                                        self.mpcontracts = result;

                                    }, {
                                        escape: false
                                    }
                                );

                               self.mpaddcharges = undefined;
                                self.loaderState.startLoadingSpinner();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.CtrTerminationRestaurantVue.getActiveAddionalCharges}',
                                    this.accountid,
                                    function(result, event) {
                                        self.loaderState.stopLoadingSpinner();

                                        if (!event.status || !result) {
                                            self.errorState.setErrorMsg({
                                                msg: "Impossible to load Additional Charges: " + event.message,
                                                type: "error"
                                            });
                                            return;
                                        }

                                        self.mpaddcharges = result;

                                    }, {
                                        escape: false
                                    }
                                );


                               self.mpaddchargesPP = undefined;
                                self.loaderState.startLoadingSpinner();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.CtrTerminationRestaurantVue.getActiveAddionalChargesPP}',
                                    this.accountid,
                                    function(result, event) {
                                        self.loaderState.stopLoadingSpinner();

                                        if (!event.status || !result) {
                                            self.errorState.setErrorMsg({
                                                msg: "Impossible to load Additional Charges Premium Placement: " + event.message,
                                                type: "error"
                                            });
                                            return;
                                        }

                                        self.mpaddchargesPP = result;

                                    }, {
                                        escape: false
                                    }
                                );


                               self.mpaddons = undefined;
                                self.loaderState.startLoadingSpinner();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.CtrTerminationRestaurantVue.getActiveAddOns}',
                                    this.accountid,
                                    function(result, event) {
                                        self.loaderState.stopLoadingSpinner();

                                        if (!event.status || !result) {
                                            self.errorState.setErrorMsg({
                                                msg: "Impossible to load add ons: " + event.message,
                                                type: "error"
                                            });
                                            return;
                                        }

                                        self.mpaddons = result;

                                    }, {
                                        escape: false
                                    }
                                );


                               self.mpbranding = undefined;
                                self.loaderState.startLoadingSpinner();
                                Visualforce.remoting.Manager.invokeAction(
                                    '{!$RemoteAction.CtrTerminationRestaurantVue.getBranding}',
                                    this.accountid,
                                    function(result, event) {
                                        self.loaderState.stopLoadingSpinner();

                                        if (!event.status || !result) {
                                            self.errorState.setErrorMsg({
                                                msg: "Impossible to load branding: " + event.message,
                                                type: "error"
                                            });
                                            return;
                                        }

                                        console.log('self.result-->'+result);
                                        console.log(result);
                                        self.mpbranding = result;


                                    }, {
                                        escape: false
                                    }
                                );

                                console.log('loaddata 2');

                            },

                     },
                    created: function() {
                       var self = this;

                        if (sforce.console.isInConsole()) {
                            sforce.console.setTabTitle("{!$Label.TP_Restaurant_Termination}");
                        }

                        this.loaddata();


                    }
                });


        var vueBus = new Vue({
            data: {
                datePickerCallback: undefined
            }
        });

        var vueDatePicker = new Vue({
            el: "#datepicker-app",
            data: {
                open: false,
                currentValue: ""
            },
            methods: {
                closed: function() {
                    this.open = false;
                },
                selected: function() {
                    vueBus.$emit("bus-date-selected", this.format());
                    this.open = false;
                },
                format: function() {
                    return moment(this.currentValue).format('DD-MM-YYYY');
                }
            }
        });

        vueBus.$on("bus-open-datepicker", function(value, cb) {
            vueDatePicker.currentValue = value || "";
            vueDatePicker.open = true;
            this.datePickerCallback = cb;
        });

        vueBus.$on("bus-date-selected", function(value) {
            if (typeof this.datePickerCallback === "function") {
                this.datePickerCallback.call(null, value);
            }
        });

        </script>


        </body>

    </html>
</apex:page>