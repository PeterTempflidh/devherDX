<!--
	PY Lead convert component.
-->
<apex:component controller="CtrCreateNewAddress">

    <apex:attribute name="lead" type="Lead" required="true" description="Lead to be converted" />

    <apex:attribute name="account" type="Account" required="true" description="Temporary account record to hold some information" />
    <apex:attribute name="wrpForFacility" type="FacilityBusinessConfigWrapper" required="true" description="Temporary Wrapper record to hold facility information" />

    <style type="text/css">
		.leadInformationFields .slds-col,
		.accountInformationFields .slds-col,
		.contactInformationFields .slds-col {
			margin-bottom: 0.5rem;
		}

		.accountInformationFields .slds-col:nth-child(even) {
			padding-left: 0.5rem;
		}

		.contactInformationFields .slds-col.paddLeft {
			padding-left: 0.5rem;
		}

		@media (min-width: 768px) {
			.leadInformationFields .slds-col:nth-child(even) {
				padding-left: 0.5rem;
			}
		}
	</style>

    <!-- main container  -->
    <div xmlns="http://www.w3.org/2000/svg"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:v-once="http://vue/fake"
         xmlns:v-html="http://vue/fake"
         xmlns:v-bind="http://vue/fake"
         xmlns:v-if="http://vue/fake"
         xmlns:v-on="http://vue/fake"
         xmlns:v-model="http://vue/fake"
         xmlns:v-cloak="http://vue/fake"
         class="slds-form-element__group">

        <!-- lead information fields -->
        <fieldset class="slds-form--compound">
            <legend class="slds-form-element__label slds-text-title--caps">{!$Label.LC_Lead_Information}</legend>
            <div class="slds-p-around--small">
                <div class="slds-grid slds-wrap slds-box leadInformationFields">

                    <!-- owner id -->
                    <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.owner}">
                                {!$ObjectType.Lead.fields.OwnerId.Label}
                            </label>
                            <div class="slds-form-element__control lookupContainer">
                                <apex:inputField id="owner" value="{!lead.OwnerId}"  />
                            </div>
                        </div>
                    </div>

                    <!-- user country  -->
                    <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.country}">
                                {!$ObjectType.Lead.fields.Country__c.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <input type="text" class="slds-input" disabled="true" value="{!lead.Country__r.name}"/>
                            </div>
                        </div>
                    </div>
                    <!--//SSC-2796 Changes: Starts Here-->
                    <!-- group typeOptionOnChange -->
                    <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.type}">
                                <abbr class="slds-required" title="required">*</abbr>{!$ObjectType.Lead.fields.Type__c.Label}
                            </label>
                            <div class="slds-form-element__control lookupContainer">
                                <apex:inputField value="{!lead.Type__c}"  required="true" onchange="typeOptionOnChange(this.value)" styleClass="slds-size--2-of-5" id="typeValue"/>
                            </div>
                        </div>
                    </div>


                    <!-- Facility -->
                    <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-2" id="facilityDiv">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.type}">
                                <abbr class="slds-required" title="required">*</abbr>{!$ObjectType.Lead.fields.Facility__c.Label}
                            </label>
                            <div class="slds-form-element__control lookupContainer">
                                <apex:inputField value="{!lead.Facility__c}" onchange="typeFacilityField(this.value)"  id="facilityValue"/>
                            </div>
                        </div>
                    </div>
                    <div class="slds-col slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-2">
                        <!-- just for alignment  -->
                    </div>
                    <!--//SSC-2796 Changes: Ends Here-->



                </div>
            </div>
        </fieldset>

        <!-- account information fields  -->
        <fieldset class="slds-form-element">
            <legend class="slds-form-element__label slds-text-title--caps">{!$Label.LC_Account_Information}</legend>
            <div class="slds-p-around--small">
                <div class="slds-grid slds-wrap slds-box accountInformationFields">

                    <!-- name  -->
                    <div class="slds-col slds-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.accountName}">
                                <abbr class="slds-required" title="required">*</abbr>{!$ObjectType.Account.fields.Name.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <apex:inputField id="accountName" styleClass="slds-input" value="{!account.Name}" required="true" />
                            </div>
                        </div>
                    </div>

                    <!-- restaurant name  -->
                    <div class="slds-col slds-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.restName}">
                                {!$ObjectType.Lead.fields.Legal_Name__c.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <apex:inputField id="restName" styleClass="slds-input" value="{!lead.Legal_Name__c}" />
                            </div>
                        </div>
                    </div>

                    <!-- Delivery_Service__c  -->
                    <div class="slds-col slds-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.leadDelivery_Service__c}">
                                {!$ObjectType.Lead.fields.Delivery_Service__c.Label}
                            </label>
                            <div class="slds-form-element__control multiselectContainer">
                                <apex:inputField id="leadDelivery_Service__c" value="{!lead.Delivery_Service__c}" />
                            </div>
                        </div>
                    </div>


                </div>
            </div>
        </fieldset>

        <!--address fields -->
        <div class="slds-form-element" id="addressForm" >
            <div>
                <legend class="slds-form-element__label slds-text-title--caps" v-if="addressModel == 'GPA'">{!$Label.LC_Address_Information}</legend>
                <legend class="slds-form-element__label slds-text-title--caps" v-if="addressModel == 'XAL'">{!$Label.LC_Address_Information}</legend>
                <div class="slds-p-around--small" >

                    <google-place-api-form v-bind:address-detail="addressDetail" v-bind:search-address="prefilledAddress"
                                           map-max-height="400" v-bind:lead-gpa-Id="leadGpaID"
                                           v-if="addressModel == 'GPA'"/>

                    <address-form v-bind:address-detail="addressDetail" v-bind:countries="countries"
                                  v-if="addressDetail.country && addressModel == 'XAL'"/>
                    <xal-address-form v-if="addressModel == 'newXAL' && countries.length > 0" v-bind:address-detail="addressDetail" v-bind:country="addressDetail.country" />
                    <spinner v-bind:open="loaderState.state.isLoading" />
                    <error-handler v-bind:message="errorState.state.message" v-bind:type="errorState.state.type" v-if="addressModel == 'GPA'"
                                   v-bind:timeout="errorState.state.timeout" v-bind:callback="errorState.state.callback" v-on:closed="errorState.clearErrorMsg()" />
                    <error-handler v-bind:message="errorState.state.message" v-bind:type="errorState.state.type"
                                   v-on:closed="errorState.clearErrorMsg()" v-if="addressModel == 'XAL'"/>
                </div>
            </div>
        </div>

        <!-- contact information fields  -->
        <fieldset class="slds-form-element">
            <legend class="slds-form-element__label slds-text-title--caps">{!$Label.LC_Contact_Information}</legend>
            <div class="slds-p-around--small">
                <div class="slds-grid slds-wrap slds-box contactInformationFields">

                    <!-- Salutation  -->
                    <div class="slds-col slds-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.leadSalutation}">
                                {!$ObjectType.Lead.fields.Salutation.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <apex:inputField id="leadSalutation" styleClass="slds-select" value="{!lead.Salutation}" />
                            </div>
                        </div>
                    </div>

                    <!-- contact role -->
                    <div class="slds-col paddLeft slds-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.role}">
                                {!$ObjectType.Contact.fields.Contact_Role__c.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <input type="text" class="slds-input" disabled="true" value="Inhaber" />
                            </div>
                        </div>
                    </div>

                    <!-- first name  -->
                    <div class="slds-col slds-size--1-of-3">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.firstname}">
                                {!$ObjectType.lead.fields.firstName.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <apex:inputField id="firstname" styleClass="slds-input" value="{!lead.firstName}" />
                            </div>
                        </div>
                    </div>

                    <!-- middle name  -->
                    <div class="slds-col paddLeft slds-size--1-of-3">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.MiddleName}">
                                {!$ObjectType.lead.fields.MiddleName.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <apex:inputField id="MiddleName" styleClass="slds-input" value="{!lead.MiddleName}" />
                            </div>
                        </div>
                    </div>

                    <!-- last name  -->
                    <div class="slds-col paddLeft slds-size--1-of-3">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.lastname}">
                                <abbr class="slds-required" title="required">*</abbr>{!$ObjectType.lead.fields.lastname.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <apex:inputField id="lastname" styleClass="slds-input" value="{!lead.lastname}" required="true" />
                            </div>
                        </div>
                    </div>

                    <!-- phone  -->
                    <div class="slds-col slds-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.Phone}">
                                <abbr class="slds-required" title="required">*</abbr>{!$ObjectType.lead.fields.Phone.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <apex:inputField id="Phone" styleClass="slds-input" value="{!lead.Phone}" required="true" />
                            </div>
                        </div>
                    </div>

                    <!-- mobile  -->
                    <div class="slds-col paddLeft slds-size--1-of-2">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label slds-truncate" for="{!$Component.MobilePhone}">
                                {!$ObjectType.lead.fields.MobilePhone.Label}
                            </label>
                            <div class="slds-form-element__control">
                                <apex:inputField id="MobilePhone" styleClass="slds-input" value="{!lead.MobilePhone}" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </fieldset>

    </div>

    <script type="text/javascript">
		if (typeof adjustLookupFields === "function") adjustLookupFields();
		if (typeof adjustMultiselectPicklist === "function") adjustMultiselectPicklist();
	</script>

    <c:VueAddressDetailComponents />
    <c:VueCommonComponents />

    <script type="text/javascript">
        //SSC-2796 variables start
        let selectedTypeOptionVar = '';
        let facilityFieldValue = '';
        let branchKitchenvalidationResult = '';
        //SSC-2796 variables End

        var vueAddressForm;
        function initGPAModel(){
		vueAddressForm = new Vue({
			el: "#addressForm",
			data: {
	            loaderState: loaderSharedState,
	            errorState: errorHandlerSharedState,
	            inputElementsState: inputElementsSharedState,
	            prefilledAddress: "",
				addressDetail: {},
				leadGpaID :"",
				addressModel : ""

			},
			methods: {
				setAccountId: function(accountId) {
					this.addressDetail.account = accountId;
				},
				validateForm: function() {
					var isValid = true;
                    // SSC-2796 - getting Address type array (Restaurant Address . Shipping etc)
                    let checkAddressType = this.inputElementsState.state.elements[0].values;
                     //SSC-2796 Commented code as this code does not work for GPA addresss model
                    /*for (var i = 0; i < this.inputElementsState.state.elements.length; i++) {
						var el = this.inputElementsState.state.elements[i];
						if (!el.isFilled) {
							el.isInError = true;
							isValid = false;

						} else {
							el.isInError = false; // clear the error message if any

						}
					}*/

                    // SSC-2796 check GPA adderess model using accumulator in Array for required address
                    // returnval will be empty in case any of address field is required but value empty
					let returnValFromAddress = this.addressDetail.components.reduce(function(acc, cmp) {
                        return acc && (!cmp.settings.Required__c || cmp.longValue);
                    }, isValid);

                    // SSC -2796 it returnValFromAddress is empty then any address required field is empty
                    if(returnValFromAddress == ''){
                        branchKitchenvalidationResult = '{!JSENCODE(wrpForFacility.errMessages.errorValidationOnAddressForm)}';
                        isValid = returnValFromAddress;
                    }
                    else{// SSC-2796 check facility validation in else
                        isValid = facilityMethod.facilityValidation(isValid,checkAddressType);
                    }
                    return isValid;

				},
				saveAddress: function(cb) { // cb is a callback function

					cb = (typeof cb === "function") ? cb : function(){};
					// validation of this form is done in componentBeforeConvert function

					this.loaderState.startLoadingSpinner();

					var self = this;
					// Remote action
					Visualforce.remoting.Manager.invokeAction(
						'{!$RemoteAction.CtrCreateNewAddress.gpa_saveAddress}',
						this.addressDetail,
						function (result, event) {
							self.loaderState.stopLoadingSpinner();

							// Checks event status
							if (!event.status || !result) {
								self.errorState.setErrorMsg({
									msg :"{!$Label.Lead_Convert_Address_Error}" + event.message,
									type: "error"
								});

								setTimeout(cb, 1500);
								return;
							}

							// everything is fine
							cb();
						}, {
							escape: false
						}
					);
				}
			},
			mounted: function() {
				this.loaderState.startLoadingSpinner();
				var self = this;

                var tmp = [];
				// set address line if specified on lead
				if ("{!lead.Street}") {
					tmp.push("{!lead.Street}");
				}

				if ("{!lead.PostalCode}") {
				    tmp.push("{!lead.PostalCode}");
                }

				if ("{!lead.City}") {
				    tmp.push("{!lead.City}");
                }

               if ("{!lead.Record_Country__c}" == 'Uruguay' || "{!lead.Record_Country__c}" == 'Dominican Republic' || "{!lead.Record_Country__c}" == "Venezuela") {
                    this.addressModel = 'GPA';
                }else if("{!lead.Record_Country__c}" == 'Panamá' || "{!lead.Record_Country__c}" == 'Paraguay') {
                    this.addressModel = 'XAL';
                }else if("{!lead.Record_Country__c}" == 'Argentina' || "{!lead.Record_Country__c}" == 'Chile' || "{!lead.Record_Country__c}" == 'Bolivia' ){
                	this.addressModel = 'newXAL';
                }
                tmp.push("{!lead.Record_Country__c}");

                this.prefilledAddress = tmp.join(",");
                this.leadGpaID="{!lead.Address_Id__c}";

				Visualforce.remoting.Manager.invokeAction(
					'{!$RemoteAction.CtrCreateNewAddress.gpa_getNewAddressPerCountry}',
					'{!lead.Record_Country__c}',
					function (result, event) {
						self.loaderState.stopLoadingSpinner();

						// Checks event status
			            if (!event.status || !result) {
			                self.errorState.setErrorMsg({
			                    msg: "{!$Label.AddressDetail_Loading_Error}" + event.message,
			                    type: "error"
			                });
			                return;
			            }

						self.addressDetail = result;
						self.addressDetail.type = ["Billing Address","Shipping Address","Restaurant Address"];

					}, {
						escape: false
					}
				);
			}
		});
		}

        function loadXALModel(){
		vueAddressForm = new Vue({
			el: "#addressForm",
			data: {
	            loaderState: loaderSharedState,
	            errorState: errorHandlerSharedState,
	            inputElementsState: inputElementsSharedState,
	            countries: [],
				addressDetail: {},
				addressModel: ""
			},
			methods: {
				setAccountId: function(accountId) {
					this.addressDetail.account = accountId;
				},
				validateForm: function() {
					var isValid = true;
                    //This is used to check the type of the address every time address type will be at 1st element
                    let checkAddressType = this.inputElementsState.state.elements[0].values;
                   // SSC -  2796 calling a reusable method for validation for facility
				    isValid = facilityMethod.facilityValidation(isValid,checkAddressType);

					for (var i = 0; i < this.inputElementsState.state.elements.length; i++) {
						var el = this.inputElementsState.state.elements[i];
						if (!el.isFilled) {
							el.isInError = true;
							isValid = false;
                            //SSC -  2796 Below error message is used when we validate the address form
                            branchKitchenvalidationResult = '{!JSENCODE(wrpForFacility.errMessages.errorValidationOnAddressForm)}';
						} else {
							el.isInError = false; // clear the error message if any
						}
					}

					return isValid;
				},
				saveAddress: function(cb) { // cb is a callback function

					cb = (typeof cb === "function") ? cb : function(){};
					// validation of this form is done in componentBeforeConvert function

					this.loaderState.startLoadingSpinner();

					var self = this;
					// Remote action
					Visualforce.remoting.Manager.invokeAction(
						'{!$RemoteAction.CtrCreateNewAddress.saveAddress}',
						this.addressDetail,
						function (result, event) {
							self.loaderState.stopLoadingSpinner();

							// Checks event status
							if (!event.status || !result) {
								self.errorState.setErrorMsg({
									msg :"{!$Label.Lead_Convert_Address_Error}" + event.message,
									type: "error"
								});

								setTimeout(cb, 1500);
								return;
							}

							// everything is fine
							cb();
						}, {
							escape: false
						}
					);
				}
			},
			mounted: function() {
				this.loaderState.startLoadingSpinner();

				var self = this;

				// set address line if specified on lead
				if ("{!lead.Street}") {
					this.addressDetail.addressLine = "{!lead.Street}";
				}

        if ("{!lead.Record_Country__c}" == 'Uruguay' || "{!lead.Record_Country__c}" == 'Dominican Republic' || "{!lead.Record_Country__c}" == "Venezuela" ) {
            this.addressModel = 'GPA';
        }else if("{!lead.Record_Country__c}" == 'Panamá' || "{!lead.Record_Country__c}" == 'Paraguay'){
            this.addressModel = 'XAL';
        }else if("{!lead.Record_Country__c}" == 'Argentina' || "{!lead.Record_Country__c}" == 'Chile' || "{!lead.Record_Country__c}" == 'Bolivia'){
          this.addressModel = 'newXAL';
        }

				// retrieves country
				Visualforce.remoting.Manager.invokeAction(
					'{!$RemoteAction.CtrCreateNewAddress.getCountryByLabel}',
					'{!lead.Record_Country__c}',
					function (result, event) {
						self.loaderState.stopLoadingSpinner();

						// Checks event status
			            if (!event.status || !result) {
			                self.errorState.setErrorMsg({
			                    msg: "{!$Label.AddressDetail_Loading_Error}" + event.message,
			                    type: "error"
			                });
			                return;
			            }

						self.countries.push(result);

						// if new address force the country value
						self.addressDetail.country = result;
						self.addressDetail.type = ["Billing Address","Shipping Address","Restaurant Address"];

					}, {
						escape: false
					}
				);

				// try to retrieves also the city
				/* commented the below validation message for PY leads for now.
				 Visualforce.remoting.Manager.invokeAction(
					'{!$RemoteAction.CtrCreateNewAddress.getAdminAreaByLabel}',
					"{!lead.City}",
					function (result, event) {
						// Checks event status
						if (!event.status || !result) {
							self.errorState.setErrorMsg({
								msg: "{!lead.City} is not a valid City. Please pick one from the list.",
								type: "warning"
							});
							return;
						}

						// checks that country is there
						if (!self.addressDetail.country) {
							return;
						}

						// checks that admin area belongs to country
						if (self.addressDetail.country.developerName == result.parentCountry) {
							self.addressDetail.country.adminArea = result;
						} else {
							self.errorState.setErrorMsg({
								msg: "{!lead.City} is not a valid city for {!lead.Record_Country__c}",
								type: "warning"
							});
						}
					}, {
						escape: false
					}
				); */
			}
		});
        }

    	function loadNewXALModel(){
        	vueAddressForm = new Vue({
			el: "#addressForm",
			data: {
	            loaderState: loaderSharedState,
	            errorState: errorHandlerSharedState,
	            inputElementsState: inputElementsSharedState,
	            countries: [],
				addressDetail: {},
                addressModel: "newXAL"
			},
			methods: {
				setAccountId: function(accountId) {
					this.addressDetail.account = accountId;
				},
				validateForm: function() {
					var isValid = true;
                    // SSC -  2796 This is used to check the type of the address every time address type will be at 1st element
                    let checkAddressType = this.inputElementsState.state.elements[0].values;
                    // SSC -  2796 calling a reusable method for validation for facility
				    isValid = facilityMethod.facilityValidation(isValid,checkAddressType);
                    for (var i = 0; i < this.inputElementsState.state.elements.length; i++) {
						var el = this.inputElementsState.state.elements[i];
						if (!el.isFilled ) {
							el.isInError = true;
							isValid = false;
                            //Below error message is used when we validate the address form
                            branchKitchenvalidationResult = '{!JSENCODE(wrpForFacility.errMessages.errorValidationOnAddressForm)}'

						} else {
							el.isInError = false; // clear the error message if any
						}
					}

				   return isValid;
				},
				saveAddress: function(cb) { // cb is a callback function

					cb = (typeof cb === "function") ? cb : function(){};
					// validation of this form is done in componentBeforeConvert function

					this.loaderState.startLoadingSpinner();

					var self = this;
					// Remote action
					Visualforce.remoting.Manager.invokeAction(
						'{!$RemoteAction.CtrCreateNewAddress.saveXALAddress}',
						this.addressDetail,
						function (result, event) {
							self.loaderState.stopLoadingSpinner();

							// Checks event status
							if (!event.status || !result) {
								self.errorState.setErrorMsg({
									msg :"Lead was converted correctly but was not possible to create the specified address. Error details: " + event.message,
									type: "error"
								});

								setTimeout(cb, 1500);
								return;
							}

							// everything is fine
							cb();
						}, {
							escape: false
						}
					);
				}
			},
			mounted: function() {
				this.loaderState.startLoadingSpinner();

				var self = this;

				// set address line if specified on lead
				if ("{!lead.Street}") {
					this.addressDetail.addressLine = "{!lead.Street}";
				}

				// retrieves country
				Visualforce.remoting.Manager.invokeAction(
					'{!$RemoteAction.CtrCreateNewAddress.getCountryByCountryName}',
					'{!lead.Record_Country__c}',
					function (result, event) {
						self.loaderState.stopLoadingSpinner();

						// Checks event status
			            if (!event.status || !result) {
			                self.errorState.setErrorMsg({
			                    msg: "Impossible to load Address, error details are: " + event.message,
			                    type: "error"
			                });
			                return;
			            }
						self.countries.push(result);

						// if new address force the country value
						self.addressDetail.country = result;
						self.addressDetail.type = ["Billing Address","Shipping Address","Restaurant Address"];

					}, {
						escape: false
					}
				);


			}
		});
        }

		function componentBeforeConvert () {
			return vueAddressForm.validateForm();
		}

		function componentAfterConvert (accountId, cb) {
			// set account on address detail
			vueAddressForm.setAccountId(accountId);
			vueAddressForm.saveAddress(cb);
		}


        //SSC-2796 Changes: Starts Here
        function typeOptionOnChange(val) {
            selectedTypeOptionVar =  val;
            var facilityDivId = document.getElementById('facilityDiv');
            if(selectedTypeOptionVar != ''  && selectedTypeOptionVar == '{!JSENCODE(wrpForFacility.condLabels.branchKitchenRestaurantAccountType)}'){
                facilityDivId.style.display = 'block';
            }
            else{
                facilityDivId.style.display = 'none';
            }
        }

        function typeFacilityField(val) {
            facilityFieldValue =  val;
        }

       //SSC-2796 hepler method for facility validation for all country address Forms
        var facilityMethod = {
            facilityValidation : function (isValid,checkAddressType){

            if(checkAddressType.includes('{!JSENCODE(wrpForFacility.condLabels.restaurantAddressType)}') &&
                selectedTypeOptionVar == '{!JSENCODE(wrpForFacility.condLabels.branchKitchenRestaurantAccountType)}'){
                branchKitchenvalidationResult = '{!JSENCODE(wrpForFacility.errMessages.errorAddressMessageForKitchen)}';
                isValid = false;
            }

            if(selectedTypeOptionVar == '{!JSENCODE(wrpForFacility.condLabels.branchKitchenRestaurantAccountType)}' && facilityFieldValue == ''){
                branchKitchenvalidationResult = '{!JSENCODE(wrpForFacility.errMessages.kitchenRestaurantFacilityValidationMessage)}';
                isValid = false;

            }
            if(selectedTypeOptionVar == '' ){
               branchKitchenvalidationResult = '{!JSENCODE(wrpForFacility.errMessages.typeFieldRequired)}';
               isValid = false;
           }
           return isValid;
           }
        }
        //SSC-2796 Changes: Ends Here

        window.addEventListener("load", function() {
           if ("{!lead.Record_Country__c}" == 'Uruguay' || "{!lead.Record_Country__c}" == 'Dominican Republic' || "{!lead.Record_Country__c}" == "Venezuela") {
                console.log('Loading GPA');
                initGPAModel();
            }else if("{!lead.Record_Country__c}" == 'Panamá' || "{!lead.Record_Country__c}" == 'Paraguay'){
                console.log('Loading XAL');
                loadXALModel();
            } else if("{!lead.Record_Country__c}" == 'Argentina' || "{!lead.Record_Country__c}" == 'Chile' || "{!lead.Record_Country__c}" == 'Bolivia' ){
            	console.log('Loading newXAL');
                loadNewXALModel();
            }
             //SSC-2796  get Type value and facility value if found on load based on histiry
            selectedTypeOptionVar =  document.getElementById("{!JSENCODE($Component.typeValue)}").value;
            console.log('-- selected Value--'+selectedTypeOptionVar);
            typeOptionOnChange(selectedTypeOptionVar);
            facilityFieldValue =  document.getElementById("{!JSENCODE($Component.facilityValue)}").value;
         })
	</script>

</apex:component>
