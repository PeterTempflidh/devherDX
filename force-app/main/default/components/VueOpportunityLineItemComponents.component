<!--
 - Created by t.holawala on 26.09.2017.
   SSC 1070 on 10.02.2020
 -->

<apex:component id="VueOpportunityLineItemComponents" layout="none" controller="VueOpportunityLineItemController">
    <script src="https://unpkg.com/vue-multiselect@2.1.0"></script>
    <link rel="stylesheet" href="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css"></link>
    <script>
        var inputElementsSharedState = {
            state: {
                elements: [] 
            },
            addElement: function(el) {  
                this.state.elements.push(el);
            },
            removeElement: function(el) {
                var idx = this.state.elements.indexOf(el); 
                if (idx > -1) {
                    this.state.elements.splice(idx, 1);
                }
            }
        };

        var loaderSharedState = {
            state: {
                isLoading: 0
            },
            startLoadingSpinner: function() {
                this.state.isLoading++;
            },
            stopLoadingSpinner: function() {
                if (this.state.isLoading > 0) {
                    this.state.isLoading--;
                }
            }
        };

        var errorHandlerSharedState = {
            state: {
                message: "",
                type: "",
                timeout: undefined,
                callback: undefined
            },
            setErrorMsg: function(err) {
                this.state.message = err.msg;
                this.state.type = err.type;
                this.state.timeout = err.timeout;
                this.state.callback = err.callback;
            },
            clearErrorMsg: function() {
                this.state.message = "";
                this.state.type = "";
                this.state.timeout = undefined;
                this.state.callback = undefined;
            }
        };

        var inputMixin = {
            data: function() {
                return {
                    isFilled: false,
                    isInError: false,
                    inputElementsState: inputElementsSharedState
                };
            },
            created: function() {
                this.inputElementsState.addElement(this);
            },
            destroyed: function() {
                this.inputElementsState.removeElement(this);
            }
        };
        Vue.component('vue-multiselect', window.VueMultiselect.default);
        // INPUT SELECT COMPONENT START
        Vue.component("input-select", {
            mixins: [inputMixin],
            props: {
            	options: Object,
            	name: String,
            	label: String,
            	disabled: Boolean,
            	selectedvalue: String,
            	showlabel: Boolean,
            	defaultvalue: {
            		type: String,
            		default: ' --- None ---'
            	}
            },
            created: function() {
                this.setSelectedOption();
            },
            data: function() {
                return {
                    selected: undefined
                }
            },
            methods: {
                onSelect: function() {
                    this.$emit("selected", this.selected);
                },
                setSelectedOption: function() {
                    if(this.selectedvalue != undefined){
                        this.selected = this.selectedvalue;
                    }else {
                        this.selected = this.options.reduce(function(acc, option) {
                                            if (option.selected) {
                                                acc = option.value;
                                            }
                                            return acc;
                                        }, undefined);
                    }

                }
            },
            watch: {
                options: function() {
                    /* This is  because when user change an entity's type only
                    options are updated */
                    this.setSelectedOption();
                },
                selected: function() {
                    this.isFilled = !!this.selected;
                },
                selectedvalue: function(){
                    this.selected = this.selectedvalue;
                }
            },
            template: `<div class="slds-form-element" v-bind:class="{'slds-has-error': isInError}">
                            <label class="slds-form-element__label" v-bind:for="name" v-if="showlabel == 'true'">
                                <abbr class="slds-required" title="required">*</abbr>
                                {{label}}
                            </label>
                            <div class="slds-form-element__control">
                                <div class="slds-select_container">
                                    <select
                                        v-bind:name="name"
                                        v-bind:id="name"
                                        v-bind:disabled="!!disabled"
                                        v-on:change="onSelect"
                                        v-model="selected"
                                        class="slds-select">
                                        <option v-if="defaultValue" value="">{{defaultvalue}} </option>
                                        <option v-for="opt in options" v-bind:value="opt.value">
                                            {{opt.label}}
                                        </option>
                                    </select>
                                </div>
                            </div>
                        </div>`
        });
        // INPUT SELECT COMPONENT END
        
        //******************************************* MESSAGE SECTION COMPONENT START*********************************************************
        Vue.component("message-section", {
            template: `<div class="slds-notify_container">
						  <div class="slds-notify slds-notify--alert slds-theme--alert-texture" role="alert">
						    <h2>Opportunity is Locked!</h2>
						  </div>
						</div>`
        });
        //*********************************************** MESSAGE SECTION COMPONENT END*******************************************************

        // TARIF SECTION COMPONENT START
        Vue.component("tarif-section", {
            props: ["tarifoptions","selectedvalue","disable","ispremiumplacement","monthyearoptions","selectedmonthyear","ispremiumplacementwithlineitems"],
            methods: {
                 setTarifId: function(value){
                    this.$emit("settarifid", value);
                 },
                 setMonthYear: function(value){
                 	this.$emit("setmonthyear", value);
                 }
            },
            template: `<div class="slds-panel" >           				
                            <div class="slds-panel__section slds-border_bottom">
                                <div class="slds-form slds-form_compound">
                                	<h2 class="slds-truncate slds-text-heading_small" title="Tarif Selection">Tariff</h2>
                                	<fieldset class="slds-form-element">
								      <div class="slds-form-element__group">
								        <div class="slds-form-element__row">
								          <div class="slds-form-element slds-size_2-of-3">
							          		<label class="slds-form-element__label" for="input-01" v-if = "ispremiumplacement" >Select Tarif</label>
							            	<input-select v-bind:options = "this.tarifoptions" name = "Tarif"
	                                                        v-bind:disabled = "disable || ispremiumplacementwithlineitems" v-on:selected = "setTarifId"
	                                                        showlabel = "false" v-bind:selectedvalue = "selectedvalue">
	                                        </input-select>
								          </div>
								          <div class="slds-form-element slds-size_1-of-3" v-if = "ispremiumplacement">
								            <label class="slds-form-element__label" for="input-02">Month-Year</label>
								            <input-select v-bind:options = "monthyearoptions" name = "monthyear"
	                                                        v-bind:disabled = "disable" v-on:selected = "setMonthYear"
	                                                        v-bind:selectedvalue = "selectedmonthyear"
	                                                        showlabel = "false">
	                                        </input-select>
								          </div>
								        </div>
								      </div>
								    </fieldset>
                                </div>
                            </div>
                        </div>`
        });
        // TARIF SECTION COMPONENT END


        // COMMISSION SECTION COMPONENT START
        Vue.component("commission-section", {
            props: ["commissions","commissionoptions","billableaccountoptions","emptycommission","locked","iso","disable","timebasetieroptions","blntimebaseenable","opportunity"],
            data: function(){
                return {
                    emptyCommissionItem: this.emptycommission,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    transferCharge: false,
                    showTimeBase: false
                }
            },
            created: function(){
            	this.transferCharge = this.checkForTransferCharge();
            },
            //SSC-1646: Changes Starts Here
            watch: {
              showTimeBase: function(newshowTimeBase, oldshowTimeBase){
              	  if(newshowTimeBase===false){
                  	this.opportunity.Time_Based_Tier_Type__c = null;
                  }
              }
            },
            //SSC-1646: Changes Ends Here
            methods: {
                addCommission: function(value){
                    this.commissions.push(value);
                    this.emptyCommissionItem = this.emptycommission;
                    this.emptyCommissionItem.hasRelatedTarif = false;
                    this.calculateEndDate();
                },
                calculateEndDate: function(){
                    this.errorState.clearErrorMsg();
                    
                    this.loaderState.startLoadingSpinner();
                    var self = this;
                    var showTimeBaselocalVar =false; // SSC-1646 - Creating a loc var for not overriding the global showTimeBase value
                    // calculate the end date
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.popuateEndDate}',
                        JSON.stringify(self.commissions),
                        function (result, event) {
                        	//self.renderCommissions = true;
                            self.loaderState.stopLoadingSpinner();
                            
                            // Checks event status
                            if (!event.status || !result) {
                                console.error('Error on End date calculation: ', event.message)
                                self.errorState.setErrorMsg({
                                    msg: "Error: " + event.message,
                                    type: "error"
                                });
                                return;
                            }

                            self.commissions.splice(0, self.commissions.length);
                            const serviceTypeSet = new Set();

                            for (var i = 0; i < result.length; i++) {
                                self.commissions.push(result[i]);
                                if(self.blntimebaseenable){
                                    if (serviceTypeSet.has(result[i].ServiceType)) {
                                        showTimeBaselocalVar =true; //SSC-1646 Changes
                                    }else{
                                        serviceTypeSet.add(result[i].ServiceType)
                                    }
                                }
                            }
                            self.showTimeBase=showTimeBaselocalVar; //SSC-1646: Changes
                            self.$emit("mandatorytimebaseevent",self.showTimeBase);
                            console.log("End Date calculated succssfully");
                        }, {
                            escape: false
                        }
                    );
                },
                deleteCommission: function(index){
                    this.commissions.splice(index,1);
                    this.calculateEndDate();
                },
                setCommission: function(value){
                    this.emptyCommissionItem = value;
                },
                checkForTransferCharge: function(){
                	for(var i=0; i< this.commissions.length; i++){
                		if(this.commissions[i].billableAccountId){
                			return true;
                		}
                	}              	
                	return false;
                },
                setTransferCharge: function(){
                	this.transferCharge = !this.transferCharge;
                },
                setTimebase: function(value){
                    this.opportunity.Time_Based_Tier_Type__c = value;
                }

            },
            template: `<div class="slds-panel" >
                        <div class="slds-panel__section slds-border_bottom">
                            <div class="slds-form slds-form_stacked">
                                <div class="slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x">
                                    <h2 class="slds-truncate slds-text-heading_small" title="Tarif Selection">Commission</h2>
                                    <div class="slds-p-around_medium" title="{!$ObjectType.Opportunity.fields.Time_Based_Tier_Type__c.Label}" v-if= "showTimeBase">
                                      <div class="slds-col slds-size_1-of-3">
                                        <span>
                                        <input-select
                                            label = "{!$ObjectType.Opportunity.fields.Time_Based_Tier_Type__c.Label}"
                                            showlabel = "true"
                                            v-bind:options = "timebasetieroptions"
                                            v-on:selected = "setTimebase"
                                            v-bind:disabled = "disable"
                                            v-bind:selectedvalue = "opportunity.Time_Based_Tier_Type__c">
                                        </input-select>
                                        </span>
                                      </div>
                                      <div class="slds-col slds-size_2-of-3">
                                      </div>
                                    </div>
                                    <div class="slds-truncate" title="{!$ObjectType.Opportunity.fields.Time_Based_Tier_Type__c.Label}" v-if= "showTimeBase" >

                                    </div>
                                    <table class="slds-table slds-table_cell-buffer">
                                        <thead>
                                            <tr class="slds-text-title_caps">
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Commission Name">Commission Name</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Service Type">Service Type</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Commission in %">Commission in %</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Commission per order">Commission per order</div>
                                                </th>
                                                <th scope="col" class ="slds-is-resizable">
                                                    <div class="slds-truncate" title="Start Date">Start Date</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="End Date">End Date</div>
                                                </th>
                                                <th scope="col" v-if = "transferCharge">
                                                    <div class="slds-truncate" title="Transfer charge to">Transfer charge to</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Action">Action</div>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <commission-lineitem-selection
                                                v-bind:commissionoptions="commissionoptions"
                                                v-bind:commission = "emptyCommissionItem"
                                                v-bind:iso = "iso"
                                                v-bind:transfercharge = "transferCharge"
                                                v-bind:billableaccountoptions = "billableaccountoptions"
                                                v-if = "!locked && !disable"
                                                v-on:addCommission = "addCommission"
                                                v-on:setcommission = "setCommission">
                                            </commission-lineitem-selection>
                                            <commission-lineitem v-if="commissions" v-for="(commission, index) in commissions"
                                                v-bind:commission = "commission"
                                                v-bind:index = "index" v-on:deleteCommission = "deleteCommission"
                                                v-bind:iso = "iso" 
                                                v-bind:disable = "disable"
                                                v-bind:transfercharge = "transferCharge"
                                                v-bind:billableaccountoptions = "billableaccountoptions"
                                                v-on:calculateenddate = "calculateEndDate"
                                                v-on:settransfercharge = "setTransferCharge"
                                                :key="index">
                                            </commission-lineitem>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>`
        });
        // COMMISSION SECTION COMPONENT END

        // COMMISSION LINE ITEM SELECTION
        Vue.component("commission-lineitem-selection", {
            props: ["commission","commissionoptions","billableaccountoptions","disable","iso","transfercharge"],
            data: function(){
                return{
                    showRegularDate: false,
                    startDate: undefined,
                    commissionInPercentage: undefined,
                    commissionPerOrder: undefined,
                    commissionId: '',
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    decimalPlaces: 1,
                }
            },
            created: function(){
                if(!this.commission.Scaled){
                    if(this.commission.CommissionInPercentage ==  undefined){
                        this.commissionInPercentage = this.commission.MinimumCommissionInPercentage;
                    }else{
                        this.commissionInPercentage = this.commission.CommissionInPercentage;
                    }
                    if(this.commission.CommissionPerOrder == undefined){
                        this.commissionPerOrder = this.commission.MinimumCommissionPerOrder;
                    }else{
                        this.commissionPerOrder = this.commission.CommissionPerOrder;
                    }
                }else{
                	this.commissionInPercentage = undefined;
                	this.commissionPerOrder = undefined;
                }
                
                // Set Decimal places for Commission Per Order. For Kuwait its 3 digits and for everything else its 2
                console.log("ISO inside commission " + this.iso);
                if(this.iso == 'KW'){
                	this.decimalPlaces = 3;
                }else{
                	this.decimalPlaces = 2;
                }
                
                this.startDate = moment().format('DD-MM-YYYY');
            },
            updated: function(){
            	if(this.commission.Scaled){
            		 this.commissionInPercentage = undefined;
            		 this.commissionPerOrder = undefined;
            	}else{
            		if((this.commission.CommissionType == 'Percentage' && this.commissionInPercentage)
            			|| (this.commission.CommissionType == 'Per Order' && this.commissionPerOrder)){
            			return;
           			}
            	}
            	
            },
            computed: {
              disableAddButton: function(){
                    if(this.commission.Scaled && this.startDate){
                        return false;
                    }else if(this.commission.ServiceType && this.startDate && 
                                (this.commissionInPercentage || this.commissionPerOrder))
                        return false;
                    return true;
              },
            },
            methods: {
                fetchCommissionDetails: function(value){
                    this.commissionId = value;
                    var self = this;
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.fetchCommissionDetails}',
                        value,
                        function (result, event) {
                            // Checks event status
                            if (!event.status) {
                                console.error('Error on commission change: ', event.message)
                                return;
                            }

                            // Check result list
                            if (!result || result.length < 1) {
                                console.log('Empty result on commission change');
                                return;
                            }
                            self.$emit("setcommission",result);
                            
                            if(!result.Scaled){
			            		if(result.CommissionInPercentage ==  undefined){
			                        self.commissionInPercentage = result.MinimumCommissionInPercentage;
			                    }else{
			                        self.commissionInPercentage = result.CommissionInPercentage;
			                    }
			                    if(result.CommissionPerOrder == undefined){
			                        self.commissionPerOrder = result.MinimumCommissionPerOrder;
			                    }else{
			                        self.commissionPerOrder = result.CommissionPerOrder;
			                    }
		                    }
		                    
                            console.log("Commission changed succssfully");
                        }, {
                            escape: false
                        }
                    );
                },
                addCommission: function(){
                	// Reset error messages
                	this.errorState.clearErrorMsg();
                    
                    this.commissionId = '';
                    this.commission.hasRelatedTarif = false;
                    this.commission.startDate = moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                    this.commission.CommissionInPercentage = this.commissionInPercentage;
                    this.commission.CommissionPerOrder = this.commissionPerOrder;
                    this.startDate = moment().format('DD-MM-YYYY');
                    this.commissionInPercentage = undefined;
                    this.commissionPerOrder = undefined;
                    this.$emit("addCommission",this.commission);               
                },
                openDatepicker: function() {
                    var self = this;
                    console.log("Startdate inside date picker .... " + self.startDate);
                    if(!self.startDate){
	                    vueBus.$emit("bus-open-datepicker", self.startDate, function(val) {
	                        self.startDate = val;
	                    });
                    }else{

                    	vueBus.$emit("bus-open-datepicker",moment(self.startDate,'DD-MM-YYYY').format() , function(val) {
	                        self.startDate = val;
	                    });

                    }
                },
                validateCommission: function(){
                	var error = false;
                	var errorMsg = '';
                	var type = '';
                	var finalValue;
                	
                	// Reset error messages
                	this.errorState.clearErrorMsg();
                	
                	// set the value to 0 if it is blank
                	if(!this.commissionInPercentage && this.commission.CommissionType == 'Percentage'){
                		this.commissionInPercentage = 0;
                	}else if(!this.commissionPerOrder && this.commission.CommissionType == 'Per Order'){
                		this.commissionPerOrder = 0;
                	}
                	
                	// Set the decimal places for commission per order.
                	if(this.commissionPerOrder){
                		this.commissionPerOrder = parseFloat(this.commissionPerOrder).toFixed(this.decimalPlaces);
                	}
                	
                	// If commission requires approval throw warning if commission is out of the range
                	if(this.commission.RequiresApproval){
                		type = 'warning';
                		if(this.commission.CommissionType == 'Percentage' && this.commissionInPercentage < this.commission.MinimumCommissionInPercentage){
                			error = true;
                			errorMsg = "Commission is less than Minimum commission allowed.Quote will be sent for approval";
                		}else if(this.commission.CommissionType == 'Per Order' && this.commissionPerOrder < this.commission.MinimumCommissionPerOrder){
                			error = true;
                			errorMsg = "Commission is less than Minimum commission allowed.Quote will be sent for approval";
                		}
                	}else{ // If commission doesn't requires approval throw error if commission is out of the range
                		type = 'error';
                		if(this.commission.CommissionType == 'Percentage' && this.commissionInPercentage < this.commission.MinimumCommissionInPercentage){
                			this.commissionInPercentage = this.commission.MinimumCommissionInPercentage;
                			errorMsg = "Error: Commission cannot be less than Minimum commission allowed";
                			error = true;
                		}else if(this.commission.CommissionType == 'Per Order' && this.commissionPerOrder < this.commission.MinimumCommissionPerOrder){
                			this.commissionPerOrder = this.commission.MinimumCommissionPerOrder;
                			errorMsg = "Error: Commission cannot be less than Minimum commission allowed";
                			error = true;
                		}else if(this.commission.CommissionType == 'Percentage' && this.commissionInPercentage > this.commission.MaximumCommissionInPercentage){
                			this.commissionInPercentage = this.commission.MaximumCommissionInPercentage;
                			error = true;
                			errorMsg = "Error: Commission cannot be greater than Maximum commission allowed";
                		}else if(this.commission.CommissionType == 'Per Order' && this.commissionPerOrder > this.commission.MaximumCommissionPerOrder){
                			this.commissionPerOrder = this.commission.MaximumCommissionPerOrder
                			error = true;
                			errorMsg = "Error: Commission cannot be greater than Maximum commission allowed"
                		}
                	}
                	
                	if(error){
                		this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                	}
            	},
                popuateBillableAccount: function(value){
                	if(value)
                		this.commission.billableAccountId = value;
                	else
                		this.commission.billableAccountId = undefined;
                },
            },
            template: `<tr>
                          <th scope="row" data-label="Commission Name">
                            <div class="slds-truncate" title="CommissionName">
                                <input-select v-bind:options = "commissionoptions" v-bind:selectedvalue = "commissionId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="fetchCommissionDetails">
                                </input-select>
                            </div>
                          </th>
                          <td data-label="Service Type">
                            <div class="slds-truncate">{{ commission.ServiceType }}</div>
                          </td>
                          <td data-label="Commission in percent">
                            <div class="slds-truncate">
                                <div class="slds-form-element">
                                  <div class="slds-form-element__control">
                                    <input type="number" class="slds-input"
                                           v-model="commissionInPercentage"
                                           v-on:change = "validateCommission"
                                           v-bind:disabled="(commission.CommissionType == 'Per Order' || commission.Scaled)"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Commission per order">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input"
                                           v-model="commissionPerOrder"
                                           v-bind:value = "commissionPerOrder"
                                           v-on:change = "validateCommission"
                                           v-bind:disabled="(commission.CommissionType == 'Percentage' || commission.Scaled)"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Start Date">
                            <div class="slds-truncate">
                              <input type="text" readonly @focus="openDatepicker" v-model="startDate" class="slds-input">
                            </div>
                          </td>
                          <td data-label="End Date">
                            <div class="slds-truncate">{{ commission.endDate }}</div>
                          </td>
                          <td scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            defaultvalue = undefined
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Add commission" v-bind:disabled = "disableAddButton"
                                    v-on:click = "addCommission">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#add')}" />
                              </svg>
                              <span class="slds-assistive-text">Add commission</span>
                            </button>
                          </td>
                        </tr>`
        });
        // COMMISSION LINE ITEM SELECTION END

        // COMMISSION LINE ITEM START
        Vue.component("commission-lineitem", {
            props: ["commission","index","iso","disable","transfercharge","billableaccountoptions"],
            data: function(){
                return {
                    showRegularDate: false,
                    modalId: 'modal' + this.index,
                    backdropId : 'backdrop'+ this.index,
                    startDate: this.commission.startDate,
                    endDate: undefined,
                    openTierModal: false,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    commissionInPercentage: undefined,
                    commissionPerOrder: undefined,
                    decimalPlaces: 1,
                    billableAccountId: ''
                }
            },
            updated: function(){
                console.log("Start : "+ this.commission.startDate + " End : " + this.commission.endDate)

                if(this.commission.startDate){
                    this.commission.startDate = moment.utc(this.commission.startDate).format('YYYY-MM-DD');
                    this.startDate =  moment.utc(this.commission.startDate).format('DD-MM-YYYY');
                }else{
                	this.startDate = undefined;
                }
                if(this.commission.endDate){
                    this.commission.endDate = moment.utc(this.commission.endDate).format('YYYY-MM-DD');
                    this.endDate = moment.utc(this.commission.endDate).format('DD-MM-YYYY');
                }else{
                	this.endDate = undefined;
                }
                
                // Set the commissions
                this.commissionInPercentage = this.commission.CommissionInPercentage;
                this.commissionPerOrder = this.commission.CommissionPerOrder;  
                
                console.log("ISO inside commission " + this.iso);
                if(this.iso == 'KW'){
                	this.decimalPlaces = 3;
                }else{
                	this.decimalPlaces = 2;
                }
            },
            created: function() {

                console.log("Start : "+ this.commission.startDate + " End : " + this.commission.endDate);
                if(this.commission.startDate){
                    this.commission.startDate = moment.utc(this.commission.startDate).format('YYYY-MM-DD');

                    this.startDate = moment.utc(this.commission.startDate).format('DD-MM-YYYY');
                }else{
                	this.startDate = undefined;
                }
                
                if(this.commission.endDate){
                    this.commission.endDate = moment.utc(this.commission.endDate).format('YYYY-MM-DD');
                    this.endDate = moment.utc(this.commission.endDate).format('DD-MM-YYYY');
                }else{
                	this.endDate = undefined;
                }         
                
                // Set the commissions
                this.commissionInPercentage = this.commission.CommissionInPercentage;
                this.commissionPerOrder = this.commission.CommissionPerOrder;  
                
                if(this.iso == 'KW'){
                	this.decimalPlaces = 3;
                }else{
                	this.decimalPlaces = 2;
                }
                
                // Set the billable account Id
                if(this.commission.billableAccountId)
                	this.billableAccountId = this.commission.billableAccountId;
               	else
               		this.billableAccountId = '';
            },
            watch: {
              startDate: function(){
              	  if(this.startDate){
                  	this.commission.startDate = moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                  }
                  this.$emit("calculateenddate");
              },
              commissionInPercentage: function(){
              		this.commission.CommissionInPercentage = this.commissionInPercentage;
              },
              commissionPerOrder: function(){
              		this.commission.CommissionPerOrder = this.commissionPerOrder;
              },
              transfercharge: function(){
	           		if(this.billableaccountoptions[0] && this.billableaccountoptions[0].value){
	           			this.billableAccountId = this.billableaccountoptions[0].value;
	           			this.commission.billableAccountId = this.billableAccountId
	           		}else{
	           			this.billableAccountId = '';
	           			this.commission.billableAccountId = undefined;
	           		}
	           		
	           		if(!transfercharge){
            			this.billableAccountId = '';
            			this.product.billableAccountId = undefined;
            		}
              }
            },
            methods: {
                deleteCommission: function(index){
                	this.endDate = undefined;
                	this.errorState.clearErrorMsg();
                    this.$emit("deleteCommission",index);
                },
                openDatepicker: function() {
                    var self = this;
                    console.log("Startdate inside date picker .... " + self.startDate);
                    if(this.startDate){
	                    vueBus.$emit("bus-open-datepicker",moment(this.startDate,'DD-MM-YYYY').format() , function(val) {
	                        self.startDate = val;
	                    });
                    }else{
                    	vueBus.$emit("bus-open-datepicker",this.startDate , function(val) {
	                        self.startDate = val;
	                    });
                    }
                }, 
                toggleModal: function(){ 
                    this.openTierModal = !this.openTierModal;
                },
                addTier: function(value){
                	this.commission.tiers.push(value);
                },
                validateCommission: function(){
                	var error = false;
                	var errorMsg = '';
                	var type = '';
                	var finalValue;
                	
                	// Reset error messages
                	this.errorState.clearErrorMsg();
                    
                    // set the value to 0 if it is blank
                	if(!this.commissionInPercentage && this.commission.CommissionType == 'Percentage'){
                		this.commissionInPercentage = 0;
                	}else if(!this.commissionPerOrder && this.commission.CommissionType == 'Per Order'){
                		this.commissionPerOrder = 0;
                	}
                	
                	// Set the decimal places for commission per order.
                	if(this.commissionPerOrder){
                		this.commissionPerOrder = parseFloat(this.commissionPerOrder).toFixed(this.decimalPlaces);
                	}
                	
                	// If commission requires approval throw warning if commission is out of the range
                	if(this.commission.RequiresApproval){
                		type = 'warning';
                		if(this.commission.CommissionType == 'Percentage' && this.commissionInPercentage < this.commission.MinimumCommissionInPercentage){
                			error = true;
                			errorMsg = "Commission is less than Minimum commission allowed.Quote will be sent for approval";
                		}else if(this.commission.CommissionType == 'Per Order' && this.commissionPerOrder < this.commission.MinimumCommissionPerOrder){
                			error = true;
                			errorMsg = "Commission is less than Minimum commission allowed.Quote will be sent for approval";
                		}
                	}else{ // If commission doesn't requires approval throw error if commission is out of the range
                		type = 'error';
                		if(this.commission.CommissionType == 'Percentage' && this.commissionInPercentage < this.commission.MinimumCommissionInPercentage){
                			this.commissionInPercentage = this.commission.MinimumCommissionInPercentage;
                			errorMsg = "Error: Commission cannot be less than Minimum commission allowed";
                			error = true;
                		}else if(this.commission.CommissionType == 'Per Order' && this.commissionPerOrder < this.commission.MinimumCommissionPerOrder){
                			this.commissionPerOrder = this.commission.MinimumCommissionPerOrder;
                			errorMsg = "Error: Commission cannot be less than Minimum commission allowed";
                			error = true;
                		}else if(this.commission.CommissionType == 'Percentage' && this.commissionInPercentage > this.commission.MaximumCommissionInPercentage){
                			this.commissionInPercentage = this.commission.MaximumCommissionInPercentage;
                			error = true;
                			errorMsg = "Error: Commission cannot be greater than Maximum commission allowed";
                		}else if(this.commission.CommissionType == 'Per Order' && this.commissionPerOrder > this.commission.MaximumCommissionPerOrder){
                			this.commissionPerOrder = this.commission.MaximumCommissionPerOrder
                			error = true;
                			errorMsg = "Error: Commission cannot be greater than Maximum commission allowed"
                		}
                	}
                	
                	if(error){
                		this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                	}
            	},
            	popuateBillableAccount: function(value){
                	if(value){
                		console.log("Populating billable account " + value);
	                	this.billableAccountId = value;
	                	this.commission.billableAccountId = value;
                	}else{
                		this.billableAccountId = '';
	                	this.commission.billableAccountId = undefined;
                	}
                },
                setTransferCharge: function(){
                	this.$emit("settransfercharge");
                },
            },
            template: `<tr>
                          <th scope="row" data-label="Commission Name">
                            <div class="slds-truncate" title="CommissionName">
                                {{ commission.Name }}
                            </div>
                          </th>
                          <td data-label="Service Type">
                            <div class="slds-truncate">{{ commission.ServiceType }}</div>
                          </td>
                          <td data-label="Commission in percent">
                            <div class="slds-truncate">
                                <div class="slds-form-element">
                                  <div class="slds-form-element__control">
                                    <input type="number" class="slds-input"
                                           v-model="commissionInPercentage"
                                           v-on:change = "validateCommission"
                                           v-bind:disabled="(commission.CommissionType == 'Per Order' || commission.Scaled || disable)"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Commission per order">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input"
                                           v-model="commissionPerOrder"
                                           v-bind:value = "commissionPerOrder"
                                           v-on:change = "validateCommission"
                                           v-bind:disabled="(commission.CommissionType == 'Percentage' || commission.Scaled || disable)"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Start Date">
                            <div class="slds-truncate">
                                <input type="text" readonly @focus="openDatepicker" v-model="startDate" class="slds-input" v-bind:disabled = "disable">
                            </div>
                          </td>
                          <td data-label="End Date">
                            <div class="slds-truncate">{{ endDate }}</div>
                          </td>
                          <td scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions" v-bind:selectedvalue = "billableAccountId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            defaultvalue = undefined
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Delete commission" v-bind:disabled = "commission.isDisbaled || disable"
                                     v-on:click = "deleteCommission(index)">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#delete')}" />
                              </svg>
                              <span class="slds-assistive-text">Delete commission</span>
                            </button>
                            <button class="slds-button slds-button_brand slds-button_small" title="Add Tiers"
                                    v-if="commission.Scaled" v-on:click = "toggleModal">
                                Tiers &nbsp; <span class="slds-badge"> {{ commission.tiers.length }}</span>
                              <span class="slds-assistive-text">
                                    Add Tiers
                              </span>
                            </button>
                            <button class="slds-button slds-button_icon" title="Transfer Charge"
                                    v-on:click = "setTransferCharge" v-bind:disabled = "disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#internal_share')}" />
                              </svg>
                              <span class="slds-assistive-text">Transfer Charge</span>
                            </button>
                            
                            <div aria-hidden="false" role="dialog" class="slds-modal slds-modal_large" v-bind:class="[openTierModal ? 'slds-fade-in-open' : 'slds-fade-in-close']" v-bind:id="modalId">
                                <div class="slds-modal__container" style="width:80%;">
                                    <div class="slds-modal__content">
                                        <div class="slds-grid slds-wrap slds-grid--align-spread" >
                                            <tiers-section v-bind:tiers = "commission.tiers" v-bind:basedon = "commission.BasedOn"
                                           				v-bind:commissiontype = "commission.CommissionType"
                                           				v-bind:commission = "commission"
                                           				v-if="openTierModal"
                                           				v-bind:iso = "iso"
                                           				v-on:addtier = "addTier"/>
                                        </div>
                                    </div>
                                    <div class="slds-modal__footer">
                                        <div class="slds-button-group slds-float--right" role="group">
                                            <input type="button" class="slds-button slds-button--neutral cancel" v-on:click="toggleModal" value="Close" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-modal-backdrop" v-bind:class="[openTierModal ? 'slds-modal-backdrop--open' : 'slds-modal-backdrop--close']"  v-bind:id="backdropId"></div>
                          </td>
                        </tr>`
        });
        // COMMISSION LINE ITEM END
        // FLAT COMMISSION COMPONENT START
        Vue.component("flat-commission-component", {
            props: ["products", "disable", "billableaccountoptions", "iso", "locked", "accBackendId", "emptyProduct"],
            data () {
                return {
                          errorState: errorHandlerSharedState,
                          loaderState: loaderSharedState,
                          commissionData: undefined,
                          transferCharge: false,
                          totalAmount: 0,
                          categoryValues: [
                          ],
                          categories: [
                          ],
                          districtValues: [
                          ],
                          districts: [
                          ],
                          startDate: undefined
                        }
            },
            created: function () {
                if(this.accBackendId === undefined || this.accBackendId === "") {
                    console.log("{!$Label.Account_does_not_have_backend_Id}");
                    this.errorState.clearErrorMsg();
                    this.errorState.setErrorMsg({
                        msg: "{!$Label.Account_does_not_have_backend_Id}",
                        type: "error"
                    });
                    return;
                }
                var self = this;
                this.transferCharge = this.checkForTransferCharge();
                Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.getFlatCommissionWrapper}',
                        self.accBackendId,
                        function(result, event) {
                            // Checks event status
                            if (!event.status) {
                                console.error('Error is: ', event.message)
                                self.errorState.clearErrorMsg();
                                self.errorState.setErrorMsg({
		                            msg: "Error on Data load " + event.message,
		                            type: "error"
		                        });
                                return;
                            }
                            self.categories = result.categories;
                            self.districts = result.target_districts;
                        }, {
                            escape: false,
                            buffer: false
                        }
                );
                this.calculateTotal();
            },
             methods: {
                        checkForTransferCharge: function() {
                            for(var i=0; i< this.products.length; i++){
                                if(this.products[i].billableAccountId){
                                    return true;
                                }
                            }
                            return false;
                       },
                       setTransferCharge: function(){
                	        this.transferCharge = !this.transferCharge;
                       },
                       calculateTotal() {
                           this.totalAmount = 0;
                           this.products.forEach(product => {
                                if(product.totalAmount) {
                                    this.totalAmount+=parseFloat(product.totalAmount);
                                }
                           });
                       },
                       addTag (newTag) {
                           const tag = {
                               name: newTag,
                               code: newTag.substring(0, 2) + Math.floor((Math.random() * 10000000))
                           }
                           this.options.push(tag)
                           this.value.push(tag)
                       },
                       newProduct() {
                           return {
                               'category': String,
                               'district': String,
                               'hasRelatedTarif': undefined,
                               'lineCategoryId': Number,
                               'lineDistrictId': Number,
                               'startDate': String,
                               'totalAmount': Number
                           }
                       },
                       addProducts: function(){
                           this.loaderState.startLoadingSpinner();
                            var self = this;
                            var errorMsg = '';
                            this.categoryValues.forEach( category => {
                                self.districtValues.forEach( district => {
                                    if(!self.products.find(product => product.lineCategoryId == category.id && product.lineDistrictId == district.district_id)) {
                                        var aProduct = self.newProduct();
                                        aProduct.lineCategoryId = category.id;
                                        aProduct.category = category.name;
                                        aProduct.lineDistrictId = district.district_id;
                                        aProduct.district = district.district_name;
                                        aProduct.startDate = moment.utc(self.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                                        aProduct.totalAmount = self.emptyProduct.totalAmount;
                                        aProduct.hasRelatedTarif = self.emptyProduct.relatedTarif;
                                        self.products.push(aProduct);
                                    } else {
                                        errorMsg += '· (' + category.name + ') ' + district.district_name + ' {!$Label.Flat_Commission_already_exist}! \r\n';
                                    }
                                });
                            });
                            if(errorMsg != '') {
                                this.errorState.clearErrorMsg();
                                self.errorState.setErrorMsg({
		                            msg: errorMsg,
		                            type: "error"
		                        });
                            }
                            this.calculateTotal();
                            this.loaderState.stopLoadingSpinner();
                        },
                        deleteProduct: function(index){
                            this.errorState.clearErrorMsg();
                            this.products.splice(index,1);
                            this.calculateTotal();
                        },
                       openDatepicker: function() {
                            var self = this;
                            console.log("Startdate inside date picker .... " + self.startDate);
                            if(this.startDate) {
                                vueBus.$emit("bus-open-datepicker",moment(this.startDate,'DD-MM-YYYY').format() , function(val) {
                                    self.startDate = val;
                                });
                            } else {
                                vueBus.$emit("bus-open-datepicker",this.startDate , function(val) {
                                    self.startDate = val;
                                });
                            }
                       }
              },
            template: `
                <div class="slds-panel" >
                    <div class="slds-panel__section slds-border_bottom">
                        <div class="slds-grid_vertical">
                            <div class="slds-col slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x slds-p-bottom_small">
                                <h2 class="slds-truncate slds-text-heading_small" title="Tarif Selection">0% Commission</h2>
                            </div>
                            <div class="slds-col slds-grid slds-p-left_medium">
                                <div class="slds-col slds-grid_vertical slds-size_1-of-5 slds-p-left_medium">
                                    <div class="slds-col slds-p-bottom_small">
                                        <label class="typo__label">CATEGORY</label>
                                    </div>
                                    <div class="slds-col">
                                        <span>
                                            <vue-multiselect v-bind:disabled="disable || categories.length == 0"
                                                                v-model="categoryValues"
                                                                tag-placeholder="Add this as new tag"
                                                                placeholder="Search or add a category"
                                                                label="name"
                                                                track-by="id"
                                                                :options="categories"
                                                                :multiple="true" :taggable="true" @tag="addTag">
                                            </vue-multiselect>
                                        </span>
                                    </div>
                                </div>
                                <div class="slds-col slds-grid_vertical slds-size_1-of-5 slds-p-left_medium">
                                    <div class="slds-col slds-p-bottom_small">
                                        <label class="typo__label">DISTRICT</label>
                                    </div>
                                    <div class="slds-col">
                                        <span>
                                            <vue-multiselect v-bind:disabled="disable || districts.length == 0"
                                                                v-model="districtValues"
                                                                tag-placeholder="Add this as new tag"
                                                                placeholder="Search or add a district"
                                                                label="district_name" track-by="district_id"
                                                                :options="districts"
                                                                :multiple="true" :taggable="true" @tag="addTag">
                                            </vue-multiselect>
                                        </span>
                                    </div>
                                </div>
                                <div class="slds-col slds-grid_vertical slds-size_1-of-5 slds-p-left_medium" style="display:flex">
                                    <div class="slds-col slds-p-bottom_small" style="flex: 0 1 auto;">
                                        <label class="typo__label">START DATE</label>
                                    </div>
                                    <div class="slds-col" style="position:relative">
                                        <span style="position: absolute; top: 50%; transform: translateY(-50%);">
                                            <input type="text" readonly @focus="openDatepicker" v-model="startDate" class="slds-input" v-bind:disabled = "disable">
                                        </span>
                                    </div>
                                </div>
                                <div class="slds-col slds-size_1-of-5 slds-p-left_medium slds-grid_vertical" style="display:flex">
                                    <div class="slds-col slds-p-bottom_small" style="flex: 0 1 auto;">
                                        <label class="typo__label">ACTION</label>
                                    </div>
                                    <div class="slds-col" style="position:relative">
                                        <span style="position: absolute; top: 50%; transform: translateY(-50%);">
                                            <button class="slds-button slds-button_icon" title="Add Flat Commission"
                                            v-on:click = "addProducts()" v-bind:disabled = "disable || districtValues.length == 0 || categoryValues.length == 0 || !startDate">
                                                <svg class="slds-button__icon" aria-hidden="true">
                                                   <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                                         xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#add')}" />
                                                </svg>
                                            </button>
                                            <span class="slds-assistive-text">Add Flat Commission</span>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-col slds-p-top_medium">
                                 <table class="slds-table slds-table_cell-buffer">
                                    <thead>
                                        <tr class="slds-text-title_caps">
                                            <th scope="col">
                                                <div class="slds-truncate" title="Category">Category</div>
                                            </th>
                                            <th scope="col">
                                                <div class="slds-truncate" title="District">District</div>
                                            </th>
                                            <th scope="col">
                                                <div class="slds-truncate" title="Start Date">Start Date</div>
                                            </th>
                                            <th scope="col" v-if = "transferCharge">
                                                <div class="slds-truncate" title="Transfer charge to">Transfer charge to</div>
                                            </th>
                                            <th scope="col">
                                                <div class="slds-truncate" title="Total Amount">Total Amount</div>
                                            </th>
                                            <th scope="col">
                                                <div class="slds-truncate" title="Action">Action</div>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <flat-commission-lineitem v-if="products" v-for="(commission, index) in products"
                                            v-bind:product = "commission"
                                            v-bind:index = "index"
                                            v-bind:disable = "disable"
                                            v-bind:transfercharge = "transferCharge"
                                            v-bind:billableaccountoptions = "billableaccountoptions"
                                            v-bind:iso = "iso"
                                            v-on:settransfercharge = "setTransferCharge"
                                            v-on:calculatetotal = "calculateTotal"
                                            v-on:deleteproduct = "deleteProduct"
                                            :key="index">
                                        </flat-commission-lineitem>
                                        <tr>
                                          <th scope="row" data-label="Category">
                                            <div class="slds-truncate" title="Category">
                                            </div>
                                          </th>
                                          <td data-label="District">
                                            <div class="slds-truncate"></div>
                                          </td>
                                          <td data-label="Start Date">
                                            <div class="slds-truncate">
                                            </div>
                                          </td>
                                          <td scope="row" data-label="BillableAccount" v-if = "transferCharge">
                                            <div class="slds-truncate" title="billableAccount">
                                            </div>
                                          </td>
                                          <td data-label="Total amount">
                                            <div class="slds-truncate">
                                                <div class="slds-form-element__control">
                                                    <input type="number" class="slds-input"
                                                           :disabled=true
                                                           v-model="totalAmount"
                                                           v-bind:value = "totalAmount"/>
                                                </div>
                                            </div>
                                          </td>
                                          <td data-label="action">
                                          </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>`
        });
        // FLAT COMMISSION COMPONENT END

        // FLAT COMMISSION LINE ITEM START
        Vue.component("flat-commission-lineitem", {
            props: ["product", "index", "iso", "transfercharge", "billableaccountoptions", "disable"],
            data () {
                return {
                    startDate: undefined,
                    billableAccountId: '',
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                }
            },
            created: function() {
                this.$emit("calculatetotal");
                if(this.product.billableAccountId) {
                	this.billableAccountId = this.product.billableAccountId;
               	} else {
               		this.billableAccountId = '';
               	}
                this.startDate = moment.utc(this.product.startDate).format('DD-MM-YYYY');
            },
            updated: function(){
                this.$emit("calculatetotal");
                this.product.startDate = moment.utc(this.product.startDate).format('YYYY-MM-DD');
                this.startDate = moment.utc(this.product.startDate).format('DD-MM-YYYY');
            },
            watch: {
                startDate: function() {
                    this.product.startDate = moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                },
                transfercharge: function() {
            		if(this.billableaccountoptions[0] && this.billableaccountoptions[0].value){
            			this.billableAccountId = this.billableaccountoptions[0].value;
            			this.product.billableAccountId = this.billableAccountId;
            		}else{
            			this.billableAccountId = '';
            			this.product.billableAccountId = undefined;
            		}

            		if(!this.transfercharge){
            			this.billableAccountId = '';
            			this.product.billableAccountId = undefined;
            		}
                }
            },
            methods: {
                validateTotal: function() {
                    if(!this.product.totalAmount) {
                        this.product.totalAmount = 0;
                    }
                },
                populateBillableAccount: function(value){
                	if(value){
                		this.billableAccountId = value;
                		this.product.billableAccountId = value;
                	}else{
                		this.billableAccountId = '';
                		this.product.billableAccountId = undefined;
                	}
                },
                deleteProduct: function() {
                    this.$emit("deleteproduct",this.index);
                },
                setTransferCharge: function(){
                	this.$emit("settransfercharge");
                },
                openDatepicker: function() {
                    var self = this;
                    if(this.startDate) {
	                    vueBus.$emit("bus-open-datepicker",moment(this.startDate,'DD-MM-YYYY').format() , function(val) {
	                        self.startDate = val;
	                    });
                    } else {
                    	vueBus.$emit("bus-open-datepicker",this.startDate , function(val) {
	                        self.startDate = val;
	                    });
                    }
                }
            },
            template: `<tr>
                          <th scope="row" data-label="Category">
                            <div class="slds-truncate" title="Category">
                                {{ product.category }}
                            </div>
                          </th>
                          <td data-label="District">
                            <div class="slds-truncate">{{ product.district }}</div>
                          </td>
                          <td data-label="Start Date">
                            <div class="slds-truncate">
                                <input type="text" readonly @focus="openDatepicker" v-model="startDate" class="slds-input" v-bind:disabled = "disable">
                            </div>
                          </td>
                          <td scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions" v-bind:selectedvalue = "billableAccountId"
                                            v-bind:disabled = "disable"
                                            defaultvalue = "Branch"
                                            v-on:selected="populateBillableAccount">
                                </input-select>
                            </div>
                          </td>
                          <td data-label="Total amount">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input"
                                           v-bind:disabled = "disable"
                                           v-model="product.totalAmount"
                                           v-on:change="validateTotal"
                                           v-bind:value = "product.totalAmount""/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Delete commission" v-bind:disabled = "product.isDisbaled || disable"
                                     v-on:click = "deleteProduct()">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#delete')}" />
                              </svg>
                              <span class="slds-assistive-text">Delete flat commission</span>
                            </button>
                            <button class="slds-button slds-button_icon" title="Transfer Charge"
                                    v-on:click = "setTransferCharge" v-bind:disabled = "disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#internal_share')}" />
                              </svg>
                              <span class="slds-assistive-text">Transfer Charge</span>
                            </button>
                          </td>
                        </tr>`
        });
        // FLAT COMMISSION LINE ITEM END

        // TIERS COMPONENT
        Vue.component("tiers-section", {
            props: ["tiers","basedon","commissiontype","commission","iso"],
            data: function(){
                return {
                    emptyTier: new Object(),
                    addFactor : 1,
                    decimalPlaces: 0,
                    lastTier: false
                }
            },
            watch:{
            	commission: function(){
            		if(this.basedon == 'Orders'){
	                    this.addFactor = 1;
	                    this.decimalPlaces = 0;
	                }else{
	                	// Set 3 decimals for Kuwait
	                	if(this.iso == 'KW'){
	                		this.addFactor = 0.001;
	                    	this.decimalPlaces = 3;
	                	}else{
	                		this.addFactor = 0.01;
	                    	this.decimalPlaces = 2;
	                	}
	                }
					
					console.log("Tier creation called "+ this.tiers.length);
					if(this.tiers.length > 0){
						this.emptyTier.min = (parseFloat(this.tiers[this.tiers.length-1].max) + this.addFactor).toFixed(this.decimalPlaces);
					}else{
	                	this.emptyTier.min = this.addFactor;
	                }
	                
	                // Set the add tier section visibility to false if the last tier with max value blank is present
	                if(this.tiers.length > 0 && !this.tiers[this.tiers.length-1].max){
	                	this.lastTier = true;
	                }
            	}
            },
            created: function(){
                if(this.basedon == 'Orders'){
                    this.addFactor = 1;
                    this.decimalPlaces = 0;
                }else{
                	// Set 3 decimals for Kuwait
                	if(this.iso == 'KW'){
                		this.addFactor = 0.001;
                    	this.decimalPlaces = 3;
                	}else{
                		this.addFactor = 0.01;
                    	this.decimalPlaces = 2;
                	}
                }
				
				console.log("Tier creation called "+ this.tiers.length);
				if(this.tiers.length > 0){
					this.emptyTier.min = (parseFloat(this.tiers[this.tiers.length-1].max) + this.addFactor).toFixed(this.decimalPlaces);
				}else{
                	this.emptyTier.min = this.addFactor;
                }
                
                // Set the add tier section visibility to false if the last tier with max value blank is present
                if(this.tiers.length > 0 && !this.tiers[this.tiers.length-1].max){
                	this.lastTier = true;
                }
            },
            updated: function(){
            	if(this.basedon == 'Orders'){
                    this.addFactor = 1;
                    this.decimalPlaces = 0;
                }else{
                	// Set 3 decimals for Kuwait
                	if(this.iso == 'KW'){
                		this.addFactor = 0.001;
                    	this.decimalPlaces = 3;
                	}else{
                		this.addFactor = 0.01;
                    	this.decimalPlaces = 2;
                	}
                }
            
            	if(this.tiers.length > 0){
					this.emptyTier.min = (parseFloat(this.tiers[this.tiers.length-1].max) + this.addFactor).toFixed(this.decimalPlaces);
				}else{
                	this.emptyTier.min = this.addFactor;
                }
                
                // Set the add tier section visibility to false if the last tier with max value blank is present
                if(this.tiers.length > 0 && !this.tiers[this.tiers.length-1].max){
                	this.lastTier = true;
                }
            },
            methods: {
                addTier: function(value){
                    this.emptyTier = new Object();
                    this.emptyTier.min = parseFloat(value.max) + this.addFactor;
                    this.emptyTier.min = this.emptyTier.min.toFixed(this.decimalPlaces);
                    
                    value.sequence = this.tiers.length + 1;

                    // check if the tier is the last tier
                    if(!value.max){
                    	this.lastTier = true;
                    }
                    
                    this.$emit("addtier",value)
                    //this.tiers.push(value);
                },
                deleteTier: function(index){
                
                    this.emptyTier = new Object();
                    
                    // Check whether the last tier is deleted or not
					if(index == (this.tiers.length-1)){
						this.lastTier = false;
					}
				  	this.tiers.splice(index,1);
				  	// Populate the min value for the new empty tier
				  	if(this.tiers.length > 0){
                    	this.emptyTier.min = (parseFloat(this.tiers[this.tiers.length - 1].max) + this.addFactor).toFixed(this.decimalPlaces);
                    }else{
                    	this.emptyTier.min = this.addFactor;
                    }  
                    
                    
                    if(this.tiers[index]){
                    	if(this.tiers[index-1]){
                    		this.tiers[index].min = parseFloat(this.tiers[index-1].max) + this.addFactor;
                    	}else{
                    		this.tiers[index].min = this.addFactor;
                    	}
                    }

                    for(var counter = index; counter < this.tiers.length; counter++){
                        this.tiers[counter].sequence = counter + 1;
                    }
                }
            },
            template: `<div class="slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x slds-p-around--small">
                        <table class="slds-table slds-table_cell-buffer">
                            <thead>
                                <tr class="slds-text-title_caps">
                                    <th scope="col">
                                        <div class="slds-truncate" title="Sr. No">Sr. No</div>
                                    </th>
                                    <th scope="col">
                                        <div class="slds-truncate" title="Min">Min</div>
                                    </th>
                                    <th scope="col">
                                        <div class="slds-truncate" title="Max">Max</div>
                                    </th>
                                    <th scope="col" v-if = "commissiontype == 'Percentage'">
                                        <div class="slds-truncate" title="Commission in %">Commission in %</div>
                                    </th>
                                    <th scope="col" v-if = "commissiontype == 'Per Order'">
                                        <div class="slds-truncate" title="Commission in %">Commission Per Order</div>
                                    </th>
                                    <th scope="col">
                                        <div class="slds-truncate" title="Action">Action</div>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tier-lineitem showadd = "false"
                                    v-for = "(tier,index) in tiers"
                                    v-bind:tier = "tier"
                                    v-bind:index = "index"
                                    v-on:deletetier = "deleteTier"
                                    v-bind:addfactor = "addFactor"
                                    v-bind:commission = "commission"
                                    v-bind:commissiontype = "commissiontype"
                                    :key="tier.id">
                                </tier-lineitem>
                                <tier-lineitem-selection v-bind:tier = "emptyTier"
                                    v-on:addTier = "addTier"
                                    v-bind:addfactor = "addFactor"
                                    v-bind:commissiontype = "commissiontype"
                                    v-bind:commission = "commission"
                                    v-bind:iso = "iso"
                                    v-if = "!lastTier"
                                    v-bind:decimalplaces = "decimalPlaces">
                                </tier-lineitem-selection>
                            </tbody>
                        </table>
                    </div>`
        });
        // TIERS COMPONENT END
        
        //********************************************* TIER LINE ITEM SELECTION COMPONENT START***************************************************
        Vue.component("tier-lineitem-selection", {
            props: ["tier","addfactor","commissiontype","commission","decimalplaces","iso"],
            data: function(){
                return {
                    max: undefined,
                    commissionInPercentage: undefined,
                    commissionPerOrder: undefined,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                }
            },
            methods: {
                addTier: function(){
                    this.$emit("addTier",this.tier);
                    this.max = undefined;
                    this.commissionInPercentage = undefined;
                    this.commissionPerOrder = undefined; 
                },
                validateMaxValue: function(){
                	this.errorState.clearErrorMsg();
                    
                    console.log("max before " + this.max); 
                    if(!this.max)
                    	return;
                    	
                	this.max = parseFloat(this.max).toFixed(this.decimalplaces);
                	
                    if(parseFloat(this.max) <= parseFloat(this.tier.min)){
                        this.max = (parseFloat(this.tier.min) + this.addfactor).toFixed(this.decimalplaces);
                        this.errorState.setErrorMsg({
                            msg: "Error: Maximum value cannot be less than or equal to minimum value",
                            type: "error"
                        });                        
                    } 
                },
                validateCommission: function(){
                	var error = false;
                	var errorMsg = '';
                	var type = '';
                	var finalValue;
                	
                	// Clear error messages
                	this.errorState.clearErrorMsg();
                	
                	// Set the decimal for CommissionPerOrder based on country: KW: 3 else 2
                	var decimalPlacesForOrders = 2;
                	if(this.iso == 'KW'){
                		decimalPlacesForOrders = 3;
                	}
                	if(this.commissionPerOrder){
                		this.commissionPerOrder = parseFloat(this.commissionPerOrder).toFixed(decimalPlacesForOrders);
                	}
                	
                	// If commission requires approval throw warning if commission is out of the range
                	if(this.commission.RequiresApproval){
                		type = 'warning';
                		if(this.commissionInPercentage && this.commissionInPercentage < this.commission.MinimumCommissionInPercentage){
                			error = true;
                			errorMsg = "Commission is less than Minimum commission allowed.Quote will be sent for approval";
                		}else if(this.commissionPerOrder && this.commissionPerOrder < this.commission.MinimumCommissionPerOrder){
                			error = true;
                			errorMsg = "Commission is less than Minimum commission allowed.Quote will be sent for approval";
                		}
                	}else{ // If commission doesn't requires approval throw error if commission is out of the range
                		type = 'error';
                		if(this.commissionInPercentage && this.commissionInPercentage < this.commission.MinimumCommissionInPercentage){
                			this.commissionInPercentage = this.commission.MinimumCommissionInPercentage;
                			errorMsg = "Error: Commission cannot be less than Minimum commission allowed";
                			error = true;
                		}else if(this.commissionPerOrder && this.commissionPerOrder < this.commission.MinimumCommissionPerOrder){
                			this.commissionPerOrder = this.commission.MinimumCommissionPerOrder.toFixed(decimalPlacesForOrders);
                			errorMsg = "Error: Commission cannot be less than Minimum commission allowed";
                			error = true;
                		}else if(this.commissionInPercentage && this.commissionInPercentage > this.commission.MaximumCommissionInPercentage){
                			this.commissionInPercentage = this.commission.MaximumCommissionInPercentage;
                			error = true;
                			errorMsg = "Error: Commission cannot be greater than Maximum commission allowed";
                		}else if(this.commissionPerOrder && this.commissionPerOrder > this.commission.MaximumCommissionPerOrder){
                			this.commissionPerOrder = this.commission.MaximumCommissionPerOrder.toFixed(decimalPlacesForOrders);
                			error = true;
                			errorMsg = "Error: Commission cannot be greater than Maximum commission allowed"
                		}
                	}
                	
                	if(error){
                		this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                	}
                }
            },
            watch: {
                max: function(){
                	console.log("max inside watcher " + this.max);
                	this.tier.max	= this.max;	
                },
                commissionInPercentage: function(){
                    this.tier.CommissionInPercentage = this.commissionInPercentage;
                },
                commissionPerOrder: function(){
                    this.tier.CommissionPerOrder = this.commissionPerOrder;
                }
            },
            computed: {
                disabled: function(){
                    if(this.commissionInPercentage || this.commissionPerOrder){
                            return false;
                    }
        
                    return true;
                }
            },
            template: `<tr>
                          <td data-label="Sr. No">
                            <div class="slds-truncate">
                            	<!-- Empty TD for alignment -->
                            </div>
                          </td>
                          <td data-label="Min">
                            <div class="slds-truncate">
                                <div class="slds-truncate">
                                    <div class="slds-form-element">
                                      <div class="slds-form-element__control">
                                        <input type="number" class="slds-input" v-bind:value = "tier.min" disabled = "true">
                                      </div>
                                    </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Max">
                            <div class="slds-truncate">
                                <div class="slds-form-element">
                                  <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" placeholder="Max" v-model= "max" 
                                            v-on:change = "validateMaxValue">
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Commission in percent" v-if = "commissiontype == 'Percentage'">
                            <div class="slds-truncate">
                                <div class="slds-form-element">
                                  <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" placeholder="Commission in %" v-model = "commissionInPercentage" 
                                    		v-on:change = "validateCommission"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Commission Per Order" v-if = "commissiontype == 'Per Order'">
                            <div class="slds-truncate">
                                <div class="slds-form-element">
                                  <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" placeholder="Commission Per Order" v-model = "commissionPerOrder" 
                                    		v-on:change = "validateCommission"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Add Tier"   
                                    v-bind:disabled = "disabled"
                                    v-on:click="addTier">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#add')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Tier</span>
                            </button>
                          </td>
                        </tr>`
        });
        //********************************************* TIER LINE ITEM SELECTION COMPONENT END ******************************************************

        //********************************************* TIERS LINE ITEM COMPONENT START ***************************************************************
        Vue.component("tier-lineitem", {
            props: ["tier","index","addfactor","commissiontype","commission","decimalplaces","iso"],
            methods: {
                deleteTier: function(){
                    this.$emit("deletetier",this.index);
                },
            },
            template: `<tr>
                          <td data-label="Sr. No">
                            <div class="slds-truncate">
                                <div class="slds-truncate">
                                    {{ index + 1 }}
                                </div>
                            </div>
                          </td>
                          <td data-label="Min">
                            <div class="slds-truncate">
                                <div class="slds-truncate">
                                    <div class="slds-form-element">
                                      <div class="slds-form-element__control">
                                        <input type="number" class="slds-input" v-bind:value = "tier.min" disabled = "true">
                                      </div>
                                    </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Max">
                            <div class="slds-truncate">
                                <div class="slds-form-element">
                                  <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" placeholder="Max" v-bind:value= "tier.max" disabled = "true">
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Commission in percent" v-if = "commissiontype == 'Percentage'">
                            <div class="slds-truncate">
                                <div class="slds-form-element">
                                  <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" placeholder="Commission in %" v-bind:value = "tier.CommissionInPercentage" disabled = "true"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Commission Per Order" v-if = "commissiontype == 'Per Order'">
                            <div class="slds-truncate">
                                <div class="slds-form-element">
                                  <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" placeholder="Commission Per Order" v-bind:value = "tier.CommissionPerOrder" disabled = "true"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Delete Tier" v-on:click = "deleteTier">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#delete')}" />
                              </svg>
                              <span class="slds-assistive-text">Delete Tier</span>
                            </button>
                          </td>
                        </tr>`
        });
        // TIERS LINE ITEM COMPONENT END

        // ******************************BASIC ADDITIONAL CHARGES SECTION COMPONENT START*********************************
        Vue.component("additional-charges-section", {
            props: ["products","categoryoptions","billableaccountoptions","emptyproduct","locked","disable","iso"],
            data: function(){
                return {
                    emptyProductItem : this.emptyproduct,
                    disabled : false,
                    total: 0,
                    transferCharge: false,
                    showSpecifications: false,
                    showSpecificationsButton: false,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    showEndDate: false,
                }
            },
            created: function(){

            	console.log("ISO is ***********" + this.iso);
            	// If the country is Sweden show the end Date
            	if(this.iso == 'DO' || this.iso == 'SE' || this.iso == 'FI' || this.iso == 'AR' || this.iso == 'UY' || this.iso == 'CL' || this.iso == 'PY' || this.iso == 'BO' || this.iso == 'PA' || this.iso =='HU'){
           		this.showEndDate = true;
            	}
                // Check whether if any line items has transferred charges  
                this.transferCharge 			= this.checkForTransferCharge();
                // Check whether to display the show specifications button
                this.showSpecificationsButton	= {!$Permission.specifyLineItemDescription}
                // check whether the additional charges has specifications
                this.showSpecifications			= this.checkForSpecifications();
                this.calculateTotal();
            },
            updated: function(){
            	//this.calculateTotal();	
            },
            methods: {
                addProduct: function(value){
                	this.errorState.clearErrorMsg();
                    this.products.push(value);
                    this.calculateTotal();
                    this.emptyProductItem = this.emptyproduct;
                    this.emptyProductItem.hasRelatedTarif = false;
                },
                deleteProduct: function(index){
                	this.errorState.clearErrorMsg();
                    this.products.splice(index,1);
                    this.calculateTotal();
                },
                calculateTotal: function(){
                    console.log("Calculating total");
                    this.total = 0;
                    for(i=0;i<this.products.length;i++){
                        if(this.products[i].totalAmount)
                            this.total += parseFloat(this.products[i].totalAmount);
                    }
					this.total = this.total.toFixed(2);
                    return this.total;
                },
                populateProduct: function(value){
                    this.emptyProductItem = value;
                },
                checkForTransferCharge: function(){
                	for(var i=0; i< this.products.length; i++){
                		if(this.products[i].billableAccountId){
                			return true;
                		}
                	}              	
                	return false;
                },
                checkForSpecifications: function(){
                	if(!this.showSpecificationsButton)
                		return false;
                	for(var i=0; i< this.products.length; i++){
                		if(this.products[i].specifications){
                			return true;
                		}
                	}              	
                	return false
                },
                setTransferCharge: function(){
                	this.transferCharge = !this.transferCharge;
                },
                setShowSpecifications: function(){
                	this.showSpecifications = !this.showSpecifications;
                }
            },
            watch: {
            	products: function(){
            		this.calculateTotal();
            	}
            }, 
            computed:{
            	numberOfColumns: function(){
            		var totalCols = 6;
            		if(this.showEndDate)
            			totalCols++;
            		if(this.transferCharge)
            			totalCols++;
            		if(this.showSpecifications)
            			toalCols++;

            		return totalCols;
            	}
            },
            template: `<div class="slds-panel" >
                        <div class="slds-panel__section slds-border_bottom">
                            <div class="slds-form slds-form_stacked">
                                <div class="slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x">
                                    <h2 class="slds-truncate slds-text-heading_small" title="Additional Charges">Additional Charges</h2>
                                    <table class="slds-table slds-table_cell-buffer">
                                        <thead>
                                            <tr class="slds-text-title_caps">
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Product Group">Product Group</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Product Name">Product Name</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="List Price">List Price</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Discount">Discount</div>
                                                </th>
                                                <th scope="col"> 
                                                    <div class="slds-truncate" title="Quantity">Quantity</div>
                                                </th>
                                                <!--<th scope="col">
                                                    <div class="slds-truncate" title="Installments">Installments</div>
                                                </th> ** HIDING NSTALLMENTS AS PER SP-1769           -->
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Start Date">Start Date</div>
                                                </th>
                                                <th scope="col" v-if = "showEndDate">
                                                    <div class="slds-truncate" title="End Date">End Date</div>
                                                </th>
                                                <th scope="col" v-if = "transferCharge">
                                                    <div class="slds-truncate" title="Transfer charge to">Transfer charge to</div>
                                                </th>
                                                <th scope="col" v-if = "showSpecifications">
                                                    <div class="slds-truncate" title="Specifications">Specifications</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Total Amount">Total Amount</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Action">Action</div>
                                                </th> 
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <additional-charges-selection v-bind:product="emptyProductItem"
                                                    v-bind:categoryoptions = "categoryoptions"
                                                    v-bind:disable = "disabled"
                                                    v-bind:transfercharge = "transferCharge"
                                                    v-bind:showSpecifications = "showSpecifications"
                                                    v-bind:billableaccountoptions = "billableaccountoptions"
                                                    v-bind:showEndDate = "showEndDate"
                                                    v-on:addproduct ="addProduct"
                                                    v-if = "!locked && !disable"
                                                    v-on:populateproduct = "populateProduct"/>
                                            <additional-charges-lineitem v-for = "(product,index) in products"
                                            		v-bind:billableaccountoptions = "billableaccountoptions"
                                                    v-bind:product = "product"
                                                    v-bind:transfercharge = "transferCharge"
                                                    v-bind:showSpecifications = "showSpecifications"
                                                    v-bind:showSpecificationsButton = "showSpecificationsButton"
                                                    v-bind:index = "index"
                                                    v-bind:showEndDate = "showEndDate"
                                                    v-on:calculatetotal = "calculateTotal"
                                                    v-on:deleteproduct = "deleteProduct"
                                                    v-on:settransfercharge = "setTransferCharge"
                                                    v-on:setshowspecifications = "setShowSpecifications"
                                                    v-bind:disable = "disable"
                                                    :key = "index" />
                                             <tr>
                                                 <td data-label="Total" 
                                                 	v-bind:colspan = "totalCols" >
                                                    <div class="slds-truncate slds-float_right" ><b>Total</b></div>
                                                 </td>
                                                 <td data-label="Total" >
                                                    <div class="slds-truncate" >{{ total }}</div>
                                                 </td>
                                             </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>`
        });
        // ******************************BASIC ADDITIONAL CHARGES COMPONENT END*********************************

        // *******************************ADDITIONAL CHARGES SELECTION COMPONENT START*****************************
        Vue.component("additional-charges-selection", {
            props: ["product","categoryoptions","disable","billableaccountoptions","transfercharge","showSpecifications","showEndDate"],
            data: function(){
                return {
                    productOptions: [],
                    categoryId: '',
                    productId: '',
                    installments: undefined,
            		quantity: undefined,
            		discount: undefined,
            		errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    startDate: undefined,
                    endDate: undefined
                }
            },

            created: function(){
            	 this.installments 	= this.product.installments;
               	 this.quantity		= this.product.quantity;
               	 this.discount		= this.product.discount;
               	 this.startDate 	= moment().format('DD-MM-YYYY');
            },
            updated: function(){
            	 this.installments 	= this.product.installments;
               	 this.quantity		= this.product.quantity;
               	 this.discount		= this.product.discount;
            },
            methods:{
                fetchProducts : function(value){
                    this.categoryId = value;
                    this.productId = '';
                    var self = this;
                    // Fetch all the products based on the category
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.fetchProducts}',
                        value,
                        function (result, event) {

                            // Checks event status
                            if (!event.status || !result) {
                                console.error('Error in Fetching products : ', event.message)
                                self.errorState.setErrorMsg({
                                    msg: "An error occurred while fetching the products",
                                    type: "error"
                                });
                                return;
                            }

                            self.productOptions = result;
                            self.fetchProductDetails(self.productId);
                            console.log("Products fetched successfully " + result.length);
                        }, {
                            escape: false
                        }
                    );
                },
                fetchProductDetails: function(value){
                    this.productId = value;
                    var self = this;
                    // Fetch all the products based on the category
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.fetchProductDetails}',
                        value,
                        function (result, event) {

                            // Checks event status
                            if (!event.status || !result) {
                                console.error('Error in Fetching product  details : ', event.message)
                                self.errorState.setErrorMsg({
                                    msg: "An error occurred while fetching the products",
                                    type: "error"
                                });
                                return;
                            }
                            
                            self.$emit("populateproduct",result);
                            console.log("Product details fetched successfully " + result.length);
                        }, {
                            escape: false
                        }
                    );
                },
                addProduct: function(){
                    this.categoryId = '';
                    this.productId = '';
                    this.productOptions = [];
                    this.product.startDate = moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                    this.startDate = moment().format('DD-MM-YYYY');
                    if(this.endDate){
	                    this.product.endDate = moment.utc(this.endDate,'DD-MM-YYYY').format('YYYY-MM-DD');
	                    this.endDate = null;
                    }
                    this.$emit("addproduct",this.product);
                },
                popuateBillableAccount: function(value){
                	if(value)
                		this.product.billableAccountId = value;
                	else
                		this.product.billableAccountId = undefined;
                },
                validateInstallments: function(){
                	if(!this.installments){
                		this.installments = undefined;
                	}else if(this.installments < 0){
                		this.installments = 0;
                	}
                },
                validateQuantity: function(){
                	if(!this.quantity){
                		this.quantity = 1;
                	}else if(this.quantity <= 0){
                		this.quantity = 1;
                	}
                },
               validateDiscount: function(){
                	var error = false;
                	var errorMsg = '';
                	var type = '';
                	
                	this.errorState.clearErrorMsg();
                	
                	if (this.discount && this.discount.indexOf('%') != -1) {
                        var discountValue = this.discount.substr(0,this.discount.indexOf('%') - 0);
                        if(discountValue < 0){
                        	this.discount = "0%";
                        	return;
                        }
                        
                        if(this.product.unapprovedDiscountLimit != undefined && this.product.unapprovedDiscountLimit >= 0){
                        	if(this.product.requiresAddOn){
                        		if(parseFloat(discountValue) > this.product.unapprovedDiscountLimit){
                        			console.log("Discount is greater than maximum allowed discount. Quote will be sent for approval");
                       				errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                       				type = "warning";
                       				error = true;
                        		}
                        	}else{
                        		if(parseFloat(discountValue) > this.product.unapprovedDiscountLimit){
                       				console.log("Discount cannot be greater than maximum allowed discount");
                       				errorMsg = "Discount cannot be greater than maximum allowed discount";
                       				type = "error";
                       				this.discount = this.product.unapprovedDiscountLimit + '%';
                       				error = true;
                        		}
                        	}
                        }
                        
                        if(parseFloat(this.product.listPrice) > 0){
	                       	if(discountValue > 100){
	                       		this.discount = "100%";
	                       	}
                       	}
                        
                    }else{
                    	if(!this.discount){
	                		this.discount = undefined;
	                	}else if(this.discount < 0){
	                		this.discount = 0;
	                	}
	                	
	                	if(this.product.unapprovedDiscountLimit != undefined && this.product.unapprovedDiscountLimit >= 0){
	                		var discountValue = (parseFloat(this.product.discount) * 100)/this.product.listPrice;
	                		if(this.product.requiresAddOn){
                        		if(discountValue > this.product.unapprovedDiscountLimit){
                       				errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                       				type = "warning"; 
                       				error = true;
                        		}
                        	}else{
                        		if(discountValue > this.product.unapprovedDiscountLimit){
                       				errorMsg = "Discount cannot be greater than maximum allowed discount";
                       				type = "error";
                       				this.discount = ((this.product.unapprovedDiscountLimit/100)*this.product.listPrice).toString();
                       				error = true;
                        		}
                        	}
	                	}
	                	
	                	/* Dont alllow discount to be greater than list price only when list price is positive
	                	   because for negative list price there can be positive discount. Espcially for Sweden
	                	*/
	                	if(parseFloat(this.product.listPrice) > 0){
		                	if(parseFloat(this.discount) > parseFloat(this.product.listPrice)){
		                		this.discount = this.product.listPrice.toString();
		                	}
	                	}
                    } 
                    
                    
                    if(error){
                		this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                	}             	
                },
                validateDates: function(){
                	this.errorState.clearErrorMsg();
                	if(this.endDate){
                		if(moment.utc(this.endDate,'DD-MM-YYYY') < moment.utc(this.startDate,'DD-MM-YYYY')){
                			this.endDate = undefined;
                			this.errorState.setErrorMsg({
	                            msg: "End Date cannot be less than Start date",
	                            type: "Error"
	                        });
                		}
                	}
                },
                openDatepicker: function(value) {
                    var self = this;

                    if(this[value]){
	                    vueBus.$emit("bus-open-datepicker",moment(self.startDate,'DD-MM-YYYY').format() , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }else{
                    	vueBus.$emit("bus-open-datepicker",this[value] , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }
                },
            },
            watch: {
              totalAmount : function(){
                  this.product.totalAmount = this.totalAmount;
              },
              installments: function(){
              	this.product.installments = this.installments;
              },
              quantity: function(){
              	this.product.quantity = this.quantity;
              },
              discount: function(){
              	this.product.discount = this.discount;
              },
            },
            computed: {
              totalAmount: function(){
                  if((this.product.listPrice == undefined && this.product.listPrice != 0) || 
                        this.product.quantity == undefined || this.product.quantity == ''){
                          return;
                  } 
                  var discountValue = "0";
                  var discountAmount = 0;
                  var percentageFlag = false;
                    if(this.product.discount && this.product.discount != ''){ 
                        if (this.product.discount.indexOf('%') != -1) {
                            discountValue = this.product.discount.substr(0,this.product.discount.indexOf('%') - 0);
                            percentageFlag = true;
                        }else{
                            discountValue = this.product.discount;
                        }

                        if (percentageFlag) {
                            discountAmount = Math.abs(this.product.listPrice * (parseFloat(discountValue) / 100));
                        } else {
                            discountAmount = discountValue;
                        }
                    }

                    var discountedListPrice = this.product.listPrice - discountAmount;
                    var result = parseInt(this.product.quantity) * discountedListPrice;
                    result=+result.toFixed(2);

                    console.log("Total amount is " + result);
                    return result;
              }
            },
            template: `<tr>
                          <th scope="row" data-label="Category Name">
                            <div class="slds-truncate" title="categoryName">
                                <input-select v-bind:options = "categoryoptions" v-bind:selectedvalue = "categoryId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="fetchProducts">
                                </input-select>
                            </div>
                          </th>
                          <td data-label="Products">
                            <div class="slds-truncate" title="Products">
                                <input-select v-bind:options = "productOptions" v-bind:selectedvalue = "productId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="fetchProductDetails">
                                </input-select>
                            </div>
                          </td>
                          <td data-label="List Price">
                            <div class="slds-truncate">{{ product.listPrice }}</div>
                          </td>
                          <td data-label="Discount">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="text" class="slds-input" v-model="discount" v-on:change = "validateDiscount"/>
                                </div>
                            </div>
                          </td>
                          <td data-label="Quantity">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="quantity" value="0" v-on:change = "validateQuantity"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <!--<td data-label="Installments">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="installments" value="0" v-on:change = "validateInstallments"/>
                                  </div>
                                </div>
                            </div>
                          </td>   ** HIDING NSTALLMENTS AS PER SP-1769           -->
                          <td data-label="Start Date">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('startDate')" v-model="startDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td data-label="End Date" v-if = "showEndDate">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('endDate')" v-model="endDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            defaultvalue = undefined
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </td>  
                          <td scope="row" data-label="specifications" v-if = "showSpecifications">
                            <div class="slds-truncate" title="specifications">
                            	<textarea class="slds-textarea" v-model="product.specifications"></textarea>
                            </div>
                          </td>
                          <td data-label="Total Amount">
                            <div class="slds-truncate">{{ totalAmount }}</div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Add Product"
                                    v-on:click = "addProduct" v-bind:disabled = "this.totalAmount == undefined">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#add')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Product</span>
                            </button>
                          </td>
                        </tr>`
        });
        // ADDITIONAL CHARGES SELECTION COMPONENT END

        // ADDITIONAL CHARGES LINE ITEM COMPONENT START
        Vue.component("additional-charges-lineitem", {
            props: ["product","index","billableaccountoptions","transfercharge","disable","showEndDate","showSpecificationsButton","showSpecifications"],
            data: function(){
            	return {
            		billableAccountId: '',
            		installments: undefined,
            		quantity: undefined,
            		discount: undefined,
            		errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    startDate: undefined,
                    endDate: undefined
            	}
            },
            created: function(){
                this.$emit("calculatetotal");
                if(this.product.billableAccountId)
                	this.billableAccountId = this.product.billableAccountId;
               	else
               		this.billableAccountId = '';
               		
               	 this.installments 	= this.product.installments;
               	 this.quantity		= this.product.quantity;
               	 this.discount		= this.product.discount;
               	 
               	 this.startDate		= moment.utc(this.product.startDate).format('DD-MM-YYYY');
               	 if(this.product.endDate){
               	 	this.endDate		= moment.utc(this.product.endDate).format('DD-MM-YYYY');
               	 }
            },
            updated: function(){
            	this.installments 	= this.product.installments;
            	this.quantity		= this.product.quantity;
               	this.discount		= this.product.discount;
               	this.startDate		= moment.utc(this.product.startDate).format('DD-MM-YYYY');
               	if(this.product.endDate){
               		this.endDate		= moment.utc(this.product.endDate).format('DD-MM-YYYY');
               	}
            },
            watch: {
              totalAmount : function(){
                  this.product.totalAmount = this.totalAmount;
                  this.$emit("calculatetotal");
              },
              installments: function(){
              	this.product.installments = this.installments;
              },
              quantity: function(){
              	this.product.quantity = this.quantity;
              },
              discount: function(){
              	this.product.discount = this.discount;
              },

              transfercharge: function(){
            		if(this.billableaccountoptions[0] && this.billableaccountoptions[0].value){
            			this.billableAccountId = this.billableaccountoptions[0].value;
            			this.product.billableAccountId = this.billableAccountId;
            		}else{
            			this.billableAccountId = '';
            			this.product.billableAccountId = undefined;
            		}

            		if(!transfercharge){
            			this.billableAccountId = '';
            			this.product.billableAccountId = undefined;
            		}
              },
              startDate: function(){
              	this.product.startDate = moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
              },
              endDate: function(){
              	if(this.endDate){
              		this.product.endDate = moment.utc(this.endDate,'DD-MM-YYYY').format('YYYY-MM-DD');
              	}else{
              		this.product.endDate = null;	
              	}
              }
            },
            computed: {
              totalAmount: function(){
                  if((this.product.listPrice == undefined && this.product.listPrice != 0) || 
                        this.product.quantity == undefined || this.product.quantity == ''){
                          return;
                  }
                  var discountValue = "0";
                  var discountAmount = 0;
                  var percentageFlag = false;
                    if(this.product.discount && this.product.discount != ''){
                        if (this.product.discount.indexOf('%') != -1) {
                            discountValue = this.product.discount.substr(0,this.product.discount.indexOf('%') - 0);
                            percentageFlag = true;
                        }else{
                            discountValue = this.product.discount;
                        }

                        if (percentageFlag) {
                            discountAmount = Math.abs(this.product.listPrice * (parseFloat(discountValue) / 100));
                        } else {
                            discountAmount = discountValue;
                        }
                    }

                    var discountedListPrice = this.product.listPrice - discountAmount;
                    var result = parseInt(this.product.quantity) * discountedListPrice;
                    result=+result.toFixed(2);

                    this.product.totalAmount = result;
                    console.log("Total amount is " + result);
                    return result;
              }
            },
            methods: {
                deleteProduct: function(){
                    this.$emit("deleteproduct",this.index);
                },
                popuateBillableAccount: function(value){
                	if(value){
                		this.billableAccountId = value;
                		this.product.billableAccountId = value;
                	}else{
                		this.billableAccountId = '';	
                		this.product.billableAccountId = undefined;
                	}
                },
                setTransferCharge: function(){
                	this.$emit("settransfercharge");
                },
                setShowSpecifications: function(){
                	this.$emit("setshowspecifications");
                },
                validateQuantity: function(){
                	if(!this.quantity){
                		this.quantity = 1;
                	}else if(this.quantity <= 0){
                		this.quantity = 1;
                	}
                },
                validateDates: function(){
                	this.errorState.clearErrorMsg();
                	if(this.endDate){
                		if(moment.utc(this.endDate,'DD-MM-YYYY') < moment.utc(this.startDate,'DD-MM-YYYY')){
                			this.endDate = null;
                			this.errorState.setErrorMsg({
	                            msg: "End Date cannot be less than Start date",
	                            type: "Error"
	                        });
                		}
                	}
                },
                openDatepicker: function(value) {
                    var self = this;
                    
                    if(this[value]){
	                    vueBus.$emit("bus-open-datepicker",moment(self.startDate,'DD-MM-YYYY').format() , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }else{
                    	vueBus.$emit("bus-open-datepicker",this[value] , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }
                },
                validateInstallments: function(){
                	console.log("Validate installement");
                	if(!this.installments){
                		this.installments = undefined;
                	}else if(this.installments < 0){
                		console.log("Inside zero");
                		this.installments = 0;
                	}
                },
                validateDiscount: function(){
                	var error = false;
                	var errorMsg = '';
                	var type = '';
                	
                	this.errorState.clearErrorMsg();
                	
                	if (this.discount && this.discount.indexOf('%') != -1) {
                        var discountValue = this.discount.substr(0,this.discount.indexOf('%') - 0);
                        if(discountValue < 0){
                        	this.discount = "0%";
                        	return;
                        }
                        
                        if(this.product.unapprovedDiscountLimit != undefined && this.product.unapprovedDiscountLimit >= 0){
                        	if(this.product.requiresAddOn){
                        		if(parseFloat(discountValue) > this.product.unapprovedDiscountLimit){
                        			console.log("Discount is greater than maximum allowed discount. Quote will be sent for approval");
                       				errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                       				type = "warning";
                       				error = true;
                        		}
                        	}else{
                        		if(parseFloat(discountValue) > this.product.unapprovedDiscountLimit){
                       				console.log("Discount cannot be greater than maximum allowed discount");
                       				errorMsg = "Discount cannot be greater than maximum allowed discount";
                       				type = "error";
                       				this.discount = this.product.unapprovedDiscountLimit + '%';
                       				error = true;
                        		}
                        	}
                        }
                        
                        if(parseFloat(this.product.listPrice) > 0){
	                       	if(discountValue > 100){
	                       		this.discount = "100%";
	                       	}
                       	}
                        
                    }else{
                    	if(!this.discount){
	                		this.discount = undefined;
	                	}else if(this.discount < 0){
	                		this.discount = 0;
	                	}
	                	
	                	if(this.product.unapprovedDiscountLimit != undefined && this.product.unapprovedDiscountLimit >= 0){
	                		var discountValue = (parseFloat(this.product.discount) * 100)/this.product.listPrice;
	                		if(this.product.requiresAddOn){
                        		if(discountValue > this.product.unapprovedDiscountLimit){
                       				errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                       				type = "warning"; 
                       				error = true;
                        		}
                        	}else{
                        		if(discountValue > this.product.unapprovedDiscountLimit){
                       				errorMsg = "Discount cannot be greater than maximum allowed discount";
                       				type = "error";
                       				this.discount = ((this.product.unapprovedDiscountLimit/100)*this.product.listPrice).toString();
                       				error = true;
                        		}
                        	}
	                	}
	                	
	                	/* Dont alllow discount to be greater than list price only when list price is positive
	                	   because for negative list price there can be positive discount. Espcially for Sweden
	                	*/
	                	if(parseFloat(this.product.listPrice) > 0){
		                	if(parseFloat(this.discount) > parseFloat(this.product.listPrice)){
		                		this.discount = this.product.listPrice.toString();
		                	}
	                	}
                    } 
                    
                    
                    if(error){
                		this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                	}             	
                }
            },
            template: `<tr>
                          <th scope="row" data-label="Category Name">
                            <div class="slds-truncate" title="categoryName">
                                {{ product.categoryName }}
                            </div>
                          </th>
                          <td data-label="Products">
                            <div class="slds-truncate" title="Products">
                                {{ product.productName }}
                            </div>
                          </td>
                          <td data-label="List Price">
                            <div class="slds-truncate">{{ product.listPrice }}</div>
                          </td>
                          <td data-label="Discount">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="text" class="slds-input" v-model="discount" v-bind:disabled = "disable" v-on:change = "validateDiscount"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Quantity">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="quantity" v-bind:disabled = "disable" v-on:change = "validateQuantity"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <!-- <td data-label="Installments">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="installments" v-bind:disabled = "disable" v-on:change = "validateInstallments"/>
                                  </div>
                                </div>
                            </div>
                          </td>  ** HIDING NSTALLMENTS AS PER SP-1769           -->
                          <td data-label="Start Date">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('startDate')" v-model="startDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td data-label="End Date" v-if = "showEndDate">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('endDate')" v-model="endDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <th scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions" v-bind:selectedvalue = "billableAccountId"
                                            showlabel = "false" v-bind:disabled = "disable"
                                            defaultvalue = undefined
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </th>
                          <td scope="row" data-label="specifications" v-if = "showSpecifications">
                            <div class="slds-truncate" title="specifications">
                            	<textarea class="slds-textarea" v-model="product.specifications"></textarea>
                            </div>
                          </td>
                          <td data-label="Total Amount">
                            <div class="slds-truncate">{{ totalAmount }}</div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Delete Product"
                                    v-on:click = "deleteProduct" v-bind:disabled = "product.hasRelatedTarif || disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#delete')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Product</span>
                            </button>&nbsp;
                            <button class="slds-button slds-button_icon" title="Transfer Charge"
                                    v-on:click = "setTransferCharge" v-bind:disabled = "disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#internal_share')}" />
                              </svg>
                              <span class="slds-assistive-text">Transfer Charge</span>
                            </button> &nbsp;
                            <button class="slds-button slds-button_icon" title="Add Specifications"
                                    v-on:click = "setShowSpecifications" v-bind:disabled = "disable || !showSpecificationsButton">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#note')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Specifications</span>
                            </button>
                          </td>
                        </tr>`
        });
        // ADDITIONAL CHARGES LINE ITEM COMPONENT END


         // ******************************BASIC ASSETS AND BRANDING SECTION COMPONENT START*********************************
        Vue.component("assets-section", {
            props: ["assets","categoryoptions","billableaccountoptions","emptyassetbranding","locked","disable","iso","deliveryoptions","showdeliveryoptions"],
            data: function(){
                return {
                    emptyProductItem : this.emptyassetbranding,
                    disabled : false,
                    total: 0,
                    transferCharge: false,
                    showSpecifications: false,
                    showSpecificationsButton: false,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    showEndDate: false
                }
            },
            created: function(){
            	console.log("ISO is ***********" + this.iso);
            	// If the country is Sweden show the end Date
            	if(this.iso == 'SE'){
            		this.showEndDate = true;
            	}
                // Check whether if any line items has transferred charges
                this.transferCharge 			= this.checkForTransferCharge();
                  // Check whether to display the show specifications button
                this.showSpecificationsButton	= {!$Permission.specifyLineItemDescription}
                this.showSpecifications			= this.checkForSpecifications();

                this.calculateTotal();
            },
            updated: function(){
            	//this.calculateTotal();
            },

            methods: {
                addProduct: function(value){
                	this.errorState.clearErrorMsg();
                    this.assets.push(value);
                    this.calculateTotal();
                    this.emptyProductItem = this.emptyassetbranding;
                    this.emptyProductItem.hasRelatedTarif = false;
                    this.delivery=undefined;

                },
                deleteProduct: function(index){
                	this.errorState.clearErrorMsg();
                    this.assets.splice(index,1);
                    this.calculateTotal();
                },
                calculateTotal: function(){
                    console.log("Calculating total");
                    this.total = 0;
                    for(i=0;i<this.assets.length;i++){
                        if(this.assets[i].totalAmount)
                            this.total += parseFloat(this.assets[i].totalAmount);
                    }
					this.total = this.total.toFixed(2);
                    return this.total;
                },
                populateProduct: function(value){
                    this.emptyProductItem = value;
                },
                populateDeliveryPicklist: function(value){
                    this.asset.delivery = value;
                    if(value== 'Sharing' || value =='Takeover')
                        this.showsourcegrid=true;
                    else
                        this.showsourcegrid = false;

                },
                checkForTransferCharge: function(){
                	for(var i=0; i< this.assets.length; i++){
                		if(this.assets[i].billableAccountId){
                			return true;
                		}
                	}
                	return false;
                },
                checkForSpecifications: function(){
                	if(!this.showSpecificationsButton)
                		return false;
                	for(var i=0; i< this.assets.length; i++){
                		if(this.assets[i].specifications){
                			return true;
                		}
                	}
                	return false

                },
                setTransferCharge: function(){
                	this.transferCharge = !this.transferCharge;
                },
                setShowSpecifications: function(){
                	this.showSpecifications = !this.showSpecifications;
                }
            },
            watch: {
            	assets: function(){
            		this.calculateTotal();
            	}
            },
            computed:{
            	numberOfColumns: function(){
            		var totalCols = 5;
            		if(this.showEndDate)
            			totalCols++;
            		if(this.transferCharge)
            			totalCols++;
            		if(this.showSpecifications)
            			toalCols++;
            		if(this.showdeliveryoptions)
            			toalCols++;

            		return totalCols;
            	}
            },
            template: `<div class="slds-panel" >
                        <div class="slds-panel__section slds-border_bottom">
                            <div class="slds-form slds-form_stacked">
                                <div class="slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x">
                                    <h2 class="slds-truncate slds-text-heading_small" title="Assets">Assets & Branding</h2>
                                    <table class="slds-table slds-table_cell-buffer">
                                        <thead>
                                            <tr class="slds-text-title_caps">
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Product Group">{!$ObjectType.Opportunity_Line_Item__c.fields.Product_Group__c.label}</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Product Name">{!$ObjectType.List_Product_Price__c.fields.Product_Name__c.label}</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="List Price">{!$ObjectType.List_Product_Price__c.fields.List_Price__c.label}</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Discount">{!$ObjectType.Opportunity_Line_Item__c.fields.Discount__c.label}</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Quantity">{!$ObjectType.Opportunity_Line_Item__c.fields.Quantity__c.label}</div>
                                                </th>
                                                <th scope ="col" v-if = "showdeliveryoptions">
                                                    <div class="slds-truncate" title="Delivery">{!$ObjectType.Opportunity_Line_Item__c.fields.Delivery__c.label}</div>
                                                </th>

                                                <!--<th scope="col">
                                                    <div class="slds-truncate" title="Installments">{!$ObjectType.Opportunity_Line_Item__c.fields.Installments__c.label}</div>
                                                </th> ** HIDING NSTALLMENTS AS PER SP-1769           -->
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Start Date">{!$ObjectType.Opportunity_Line_Item__c.fields.Start_Date__c.label}</div>
                                                </th>
                                                <th scope="col" v-if = "showEndDate">
                                                    <div class="slds-truncate" title="End Date">{!$ObjectType.Opportunity_Line_Item__c.fields.End_Date__c.label}</div>
                                                </th>
                                                <th scope="col" v-if = "transferCharge">
                                                    <div class="slds-truncate" title="Transfer charge to">Transfer charge to</div>
                                                </th>
                                                 <th scope="col" v-if = "showSpecifications">
                                                    <div class="slds-truncate" title="Specifications">Specifications</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Total Amount">{!$ObjectType.Opportunity_Line_Item__c.fields.Total_Amount__c.label}</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Action">Action</div>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <assets-selection v-bind:asset="emptyProductItem"
                                                    v-bind:categoryoptions = "categoryoptions"
                                                    v-bind:disable = "disabled"
                                                    v-bind:transfercharge = "transferCharge"
                                                    v-bind:deliveryoptions ="deliveryoptions"
                                                    v-bind:showSpecifications = "showSpecifications"
                                                    v-bind:billableaccountoptions = "billableaccountoptions"
                                                    v-bind:showEndDate = "showEndDate"
                                                    v-bind:showdeliveryoptions = "showdeliveryoptions"
                                                    v-on:addproduct ="addProduct"
                                                    v-if = "!locked && !disable"
                                                    v-on:populateproduct = "populateProduct"/>
                                            <assets-lineitem v-for = "(asset,index) in assets"
                                            		v-bind:billableaccountoptions = "billableaccountoptions"
                                                    v-bind:asset = "asset"
                                                    v-bind:deliveryoptions ="deliveryoptions"
                                                    v-bind:transfercharge = "transferCharge"
                                                    v-bind:showSpecifications = "showSpecifications"
                                                    v-bind:showSpecificationsButton = "showSpecificationsButton"
                                                    v-bind:index = "index"
                                                    v-bind:showEndDate = "showEndDate"
                                                    v-bind:showdeliveryoptions = "showdeliveryoptions"
                                                    v-on:calculatetotal = "calculateTotal"
                                                    v-on:deleteproduct = "deleteProduct"
                                                    v-on:settransfercharge = "setTransferCharge"
                                                    v-on:setshowspecifications = "setShowSpecifications"
                                                    v-bind:disable = "disable"
                                                    :key = "index" />
                                             <tr>
                                                 <td data-label="Total"
                                                 	v-bind:colspan = "totalCols" >
                                                    <div class="slds-truncate slds-float_right" ><b>Total</b></div>
                                                 </td>
                                                 <td data-label="Total" >
                                                    <div class="slds-truncate" >{{ total }}</div>
                                                 </td>
                                             </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>`
        });
        // ******************************BASIC ASSETS AND BRANDING COMPONENT END*********************************

        // *******************************ASSETS AND BRANDING SELECTION COMPONENT START*****************************
        Vue.component("assets-selection", {
            props: ["asset","categoryoptions","disable","billableaccountoptions","transfercharge","showEndDate","showdeliveryoptions","deliveryoptions","showsourcegrid","showSpecifications"],
            data: function(){
                return {
                    productOptions: [],
                    categoryId: '',
                    productId: '',
                    sourceGrid: '',
                    delivery: undefined,
                    installments: undefined,
            		quantity: undefined,
            		discount: undefined,
            		errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    startDate: undefined,
                    endDate: undefined


                }
            },
            created: function(){
            	 this.installments 	= this.asset.installments;
               	 this.quantity		= this.asset.quantity;
               	 this.discount		= this.asset.discount;
               	 this.startDate 	= moment().format('DD-MM-YYYY');
               	 this.sourceGrid    = this.asset.sourceGrid;

            },
            updated: function(){
            	 this.installments 	= this.asset.installments;
               	 this.quantity		= this.asset.quantity;
               	 this.discount		= this.asset.discount;
               	 this.sourceGrid    = this.asset.sourceGrid;
               	 this.delivery      = this.asset.delivery;
            },
            methods:{
                fetchProducts : function(value){
                    this.categoryId = value;
                    this.productId = '';
                    var self = this;
                    // Fetch all the products based on the category
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.fetchAssets}',
                        value,
                        function (result, event) {

                            // Checks event status
                            if (!event.status || !result) {
                                console.error('Error in Fetching products : ', event.message)
                                self.errorState.setErrorMsg({
                                    msg: "An error occurred while fetching the products",
                                    type: "error"
                                });
                                return;
                            }

                            self.productOptions = result;
                            self.fetchProductDetails(self.productId);
                            console.log("Products fetched successfully " + result.length);
                        }, {
                            escape: false
                        }
                    );
                },
                fetchProductDetails: function(value){
                    this.productId = value;
                    var self = this;
                    // Fetch all the products based on the category
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.fetchAssetDetails}',
                        value,
                        function (result, event) {

                            // Checks event status
                            if (!event.status || !result) {
                                console.error('Error in Fetching product  details : ', event.message)
                                self.errorState.setErrorMsg({
                                    msg: "An error occurred while fetching the products",
                                    type: "error"
                                });
                                return;
                            }

                            self.$emit("populateproduct",result);
                            console.log("Product details fetched successfully " + result.length);
                        }, {
                            escape: false
                        }
                    );
                },
                addProduct: function(){
                    this.categoryId = '';
                    this.productId = '';
                    this.delivery = '';
                    this.sourceGrid='';
                    this.productOptions = [];
                    this.asset.startDate = moment(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                    this.startDate = moment().format('DD-MM-YYYY');
                    if(this.endDate){
	                    this.asset.endDate = moment(this.endDate,'DD-MM-YYYY').format('YYYY-MM-DD');
	                    this.endDate = null;
                    }

                    this.$emit("addproduct",this.asset);

                },
                popuateBillableAccount: function(value){
                	if(value)
                		this.asset.billableAccountId = value;
                	else
                		this.asset.billableAccountId = undefined;
                },
                populateDeliveryPicklist: function(value){
                    this.asset.delivery = value;
                    if(value=='Sharing' || value=='Takeover'){
                        this.showsourcegrid = true;

                    }
                    else{
                        this.showsourcegrid = false;
                        this.sourceGrid = '';
                    }

                },
                validateInstallments: function(){
                	if(!this.installments){
                		this.installments = undefined;
                	}else if(this.installments < 0){
                		this.installments = 0;
                	}
                },
                validateQuantity: function(){
                	if(!this.quantity){
                		this.quantity = 1;
                	}else if(this.quantity <= 0){
                		this.quantity = 1;
                	}
                },
               validateDiscount: function(){

                	var errorMsg = '';
                	var type = '';

                	this.errorState.clearErrorMsg();

                	if (this.discount && this.discount.indexOf('%') != -1) {
                        var discountValue = this.discount.substr(0,this.discount.indexOf('%') - 0);
                        if(discountValue < 0){
                        	this.discount = "0%";
                        	return;
                        }

                        if(this.asset.unapprovedDiscountLimit != undefined && this.asset.unapprovedDiscountLimit >= 0){
                        	if(this.asset.requiresAddOn){
                        		if(parseFloat(discountValue) > this.asset.unapprovedDiscountLimit){
                        			console.log("Discount is greater than maximum allowed discount. Quote will be sent for approval");
                       				errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                       				type = "warning";
                       				error = true;
                        		}
                        	}else{
                        		if(parseFloat(discountValue) > this.asset.unapprovedDiscountLimit){
                       				console.log("Discount cannot be greater than maximum allowed discount");
                       				errorMsg = "Discount cannot be greater than maximum allowed discount";
                       				type = "error";
                       				this.discount = this.asset.unapprovedDiscountLimit + '%';
                       				error = true;
                        		}
                        	}
                        }

                        if(parseFloat(this.asset.listPrice) > 0){
	                       	if(discountValue > 100){
	                       		this.discount = "100%";
	                       	}
                       	}

                    }else{
                    	if(!this.discount){
	                		this.discount = undefined;
	                	}else if(this.discount < 0){
	                		this.discount = 0;
	                	}

	                	if(this.asset.unapprovedDiscountLimit != undefined && this.asset.unapprovedDiscountLimit >= 0){
	                		var discountValue = (parseFloat(this.asset.discount) * 100)/this.asset.listPrice;
	                		if(this.asset.requiresAddOn){
                        		if(discountValue > this.asset.unapprovedDiscountLimit){
                       				errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                       				type = "warning";
                       				error = true;
                        		}
                        	}else{
                        		if(discountValue > this.asset.unapprovedDiscountLimit){
                       				errorMsg = "Discount cannot be greater than maximum allowed discount";
                       				type = "error";
                       				this.discount = ((this.product.unapprovedDiscountLimit/100)*this.product.listPrice).toString();
                       				error = true;
                        		}
                        	}
	                	}

	                	/* Dont alllow discount to be greater than list price only when list price is positive
	                	   because for negative list price there can be positive discount. Espcially for Sweden
	                	*/
	                	if(parseFloat(this.asset.listPrice) > 0){
		                	if(parseFloat(this.discount) > parseFloat(this.asset.listPrice)){
		                		this.discount = this.asset.listPrice.toString();
		                	}
	                	}
                    }


                    if(error){
                		this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                	}
                },
                validateDates: function(){
                	this.errorState.clearErrorMsg();
                	if(this.endDate){
                		if(moment(this.endDate,'DD-MM-YYYY') < moment(this.startDate,'DD-MM-YYYY')){
                			this.endDate = undefined;
                			this.errorState.setErrorMsg({
	                            msg: "End Date cannot be less than Start date",
	                            type: "Error"
	                        });
                		}
                	}
                },
                openDatepicker: function(value) {
                    var self = this;

                    if(this[value]){
	                    vueBus.$emit("bus-open-datepicker",moment(this[value],'DD-MM-YYYY').format('YYYY-MM-DD') , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }else{
                    	vueBus.$emit("bus-open-datepicker",this[value] , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }
                },
            },
            watch: {
              totalAmount : function(){
                  this.asset.totalAmount = this.totalAmount;
              },
              installments: function(){
              	this.asset.installments = this.installments;
              },
              quantity: function(){
              	this.asset.quantity = this.quantity;
              },
              discount: function(){
              	this.asset.discount = this.discount;
              },sourceGrid: function(){
                  this.asset.sourceGrid = this.sourceGrid;
              }
            },
            computed: {
              totalAmount: function(){
                  if((this.asset.listPrice == undefined && this.asset.listPrice != 0) ||
                        this.asset.quantity == undefined || this.asset.quantity == ''){
                          return;
                  }
                  var discountValue = "0";
                  var discountAmount = 0;
                  var percentageFlag = false;
                    if(this.asset.discount && this.asset.discount != ''){
                        if (this.asset.discount.indexOf('%') != -1) {
                            discountValue = this.asset.discount.substr(0,this.asset.discount.indexOf('%') - 0);
                            percentageFlag = true;
                        }else{
                            discountValue = this.asset.discount;
                        }

                        if (percentageFlag) {
                            discountAmount = Math.abs(this.asset.listPrice * (parseFloat(discountValue) / 100));
                        } else {
                            discountAmount = discountValue;
                        }
                    }

                    var discountedListPrice = this.asset.listPrice - discountAmount;
                    var result = parseInt(this.asset.quantity) * discountedListPrice;
                    result=+result.toFixed(2);

                    console.log("Total amount is " + result);
                    return result;
              }
            },
            template: `<tr>
                          <th scope="row" data-label="Category Name">
                            <div class="slds-truncate" title="categoryName">
                                <input-select v-bind:options = "categoryoptions" v-bind:selectedvalue = "categoryId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="fetchProducts">
                                </input-select>
                            </div>
                          </th>
                          <td data-label="Products">
                            <div class="slds-truncate" title="Products">
                                <input-select v-bind:options = "productOptions" v-bind:selectedvalue = "productId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="fetchProductDetails">
                                </input-select>
                            </div>
                          </td>
                          <td data-label="List Price">
                            <div class="slds-truncate">{{ asset.listPrice }}</div>
                          </td>
                          <td data-label="Discount">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="text" class="slds-input" v-model="discount" v-on:change = "validateDiscount"/>
                                </div>
                            </div>
                          </td>
                          <td data-label="Quantity">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="quantity" value="0" v-on:change = "validateQuantity"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <!--<td data-label="Installments">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="installments" value="0" v-on:change = "validateInstallments"/>
                                  </div>
                                </div>
                            </div>
                          </td>   ** HIDING NSTALLMENTS AS PER SP-1769           -->
                          <td data-label="Delivery"  v-if = "showdeliveryoptions">
                          	<div class="slds-truncate">
							   <input-select v-bind:options = "deliveryoptions" v-bind:selectedvalue = "delivery"
                                            showlabel = "false"
                                            v-on:selected="populateDeliveryPicklist"
                                           >
                                </input-select>
							</div>
							<div class="slds-truncate"  v-if = "showsourcegrid">
							  <div class="slds-form-element__control">
							    	<input type="text"  v-model="sourceGrid" class="slds-input" placeholder="Source GRID" >
                                </div>
							  </div>
                          </td>

                          <td data-label="Start Date">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('startDate')" v-model="startDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td data-label="End Date" v-if = "showEndDate">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('endDate')" v-model="endDate" class="slds-input">
							  </div>
							</div>
                          </td>

                          <td scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </td>
                             <td scope="row" data-label="specifications" v-if = "showSpecifications">
                            <div class="slds-truncate" title="specifications">
                            	<textarea class="slds-textarea" v-model="asset.specifications"></textarea>
                            </div>
                          </td>
                          <td data-label="Total Amount">
                            <div class="slds-truncate">{{ totalAmount }}</div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Add Product"
                                    v-on:click = "addProduct" v-bind:disabled = "(this.totalAmount == undefined  && !showsourcegrid) || (showsourcegrid &&  this.sourceGrid== '')">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#add')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Product</span>
                            </button>
                          </td>
                        </tr>`
        });
        // ASSETS AND BRANDING SELECTION COMPONENT END

        // ASSETS AND BRANDING LINE ITEM COMPONENT START
        Vue.component("assets-lineitem", {
            props: ["asset","index","billableaccountoptions","transfercharge","disable","showEndDate","showdeliveryoptions","deliveryoptions","showSpecifications","showSpecificationsButton",'showsourcegrid'],
            data: function(){
            	return {
            		billableAccountId: '',
            		installments: undefined,
            		quantity: undefined,
            		discount: undefined,
            		sourceGrid: undefined,
            		errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    startDate: undefined,
                    endDate: undefined
            	}
            },
            created: function(){
                this.$emit("calculatetotal");
                if(this.asset.billableAccountId)
                	this.billableAccountId = this.asset.billableAccountId;
               	else
               		this.billableAccountId = '';

               	 this.installments 	= this.asset.installments;
               	 this.quantity		= this.asset.quantity;
               	 this.discount		= this.asset.discount;

               	 this.startDate		= moment(this.asset.startDate).format('DD-MM-YYYY');
               	 if(this.asset.endDate){
               	 	this.endDate		= moment(this.asset.endDate).format('DD-MM-YYYY');
               	 }console.log(this.asset.delivery);
               	 if(this.asset.delivery == 'Sharing' || this.asset.delivery == 'Takeover'){
               	      this.showsourcegrid = true;
                 }else
                      this.showsourcegrid = false;

            },
            updated: function(){
            	this.installments 	= this.asset.installments;
            	this.quantity		= this.asset.quantity;
               	this.discount		= this.asset.discount;
               	this.sourceGrid     = this.asset.sourceGrid;
               	this.startDate		= moment(this.asset.startDate).format('DD-MM-YYYY');
               	if(this.asset.endDate){
               		this.endDate		= moment(this.asset.endDate).format('DD-MM-YYYY');
               	}if(this.asset.delivery == 'Sharing' || this.asset.delivery == 'Takeover'){
               	      this.showsourcegrid = true;
                 }else
                      this.showsourcegrid = false;
            },
            watch: {
              totalAmount : function(){
                  this.asset.totalAmount = this.totalAmount;
                  this.$emit("calculatetotal");
              },
              installments: function(){
              	this.asset.installments = this.installments;
              },
              quantity: function(){
              	this.asset.quantity = this.quantity;
              },
              discount: function(){
              	this.asset.discount = this.discount;
              },sourceGrid: function(){
                  this.asset.sourceGrid = this.sourceGrid;
              },
              transfercharge: function(){
            		if(this.billableaccountoptions[0] && this.billableaccountoptions[0].value){
            			this.billableAccountId = this.billableaccountoptions[0].value;
            			this.asset.billableAccountId = this.billableAccountId;
            		}else{
            			this.billableAccountId = '';
            			this.asset.billableAccountId = undefined;
            		}

            		if(!transfercharge){
            			this.billableAccountId = '';
            			this.asset.billableAccountId = undefined;
            		}
              },
              startDate: function(){
              	this.asset.startDate = moment(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
              },
              endDate: function(){
              	if(this.endDate){
              		this.asset.endDate = moment(this.endDate,'DD-MM-YYYY').format('YYYY-MM-DD');
              	}else{
              		this.asset.endDate = null;
              	}
              }
            },
            computed: {
              totalAmount: function(){
                  if((this.asset.listPrice == undefined && this.asset.listPrice != 0) ||
                        this.asset.quantity == undefined || this.asset.quantity == ''){
                          return;
                  }
                  var discountValue = "0";
                  var discountAmount = 0;
                  var percentageFlag = false;
                    if(this.asset.discount && this.asset.discount != ''){
                        if (this.asset.discount.indexOf('%') != -1) {
                            discountValue = this.asset.discount.substr(0,this.asset.discount.indexOf('%') - 0); //SSC-2893: Fix
                            percentageFlag = true;
                        }else{
                            discountValue = this.asset.discount;
                        }

                        if (percentageFlag) {
                            discountAmount = Math.abs(this.asset.listPrice * (parseFloat(discountValue) / 100));
                        } else {
                            discountAmount = discountValue;
                        }
                    }

                    var discountedListPrice = this.asset.listPrice - discountAmount;
                    var result = parseInt(this.asset.quantity) * discountedListPrice;
                    result=+result.toFixed(2);

                    this.asset.totalAmount = result;
                    console.log("Total amount is " + result);
                    return result;
              }
            },
            methods: {
                deleteProduct: function(){
                    this.$emit("deleteproduct",this.index);
                },
                popuateBillableAccount: function(value){
                	if(value){
                		this.billableAccountId = value;
                		this.asset.billableAccountId = value;
                	}else{
                		this.billableAccountId = '';
                		this.asset.billableAccountId = undefined;
                	}
                },populateDeliveryPicklist: function(value){
                    this.asset.delivery = value;
                     if(value== 'Sharing' || value =='Takeover'){
                        this.showsourcegrid=true;
                     }else{
                         this.showsourcegrid = false;
                         this.sourceGrid = '';
                    }

                },
                setTransferCharge: function(){
                	this.$emit("settransfercharge");
                },
                setShowSpecifications: function(){
                	this.$emit("setshowspecifications");
                },
                validateQuantity: function(){
                	if(!this.quantity){
                		this.quantity = 1;
                	}else if(this.quantity <= 0){
                		this.quantity = 1;
                	}
                },
                validateDates: function(){
                	this.errorState.clearErrorMsg();
                	if(this.endDate){
                		if(moment(this.endDate,'DD-MM-YYYY') < moment(this.startDate,'DD-MM-YYYY')){
                			this.endDate = null;
                			this.errorState.setErrorMsg({
	                            msg: "End Date cannot be less than Start date",
	                            type: "Error"
	                        });
                		}
                	}
                },
                openDatepicker: function(value) {
                    var self = this;

                    if(this[value]){
	                    vueBus.$emit("bus-open-datepicker",moment(this[value],'DD-MM-YYYY').format('YYYY-MM-DD') , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }else{
                    	vueBus.$emit("bus-open-datepicker",this[value] , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }
                },
                validateInstallments: function(){
                	console.log("Validate installement");
                	if(!this.installments){
                		this.installments = undefined;
                	}else if(this.installments < 0){
                		console.log("Inside zero");
                		this.installments = 0;
                	}
                },
                validateDiscount: function(){
                	var error = false;
                	var errorMsg = '';
                	var type = '';

                	this.errorState.clearErrorMsg();

                	if (this.discount && this.discount.indexOf('%') != -1) {
                        var discountValue = this.discount.substr(0,this.discount.indexOf('%') - 0);
                        if(discountValue < 0){
                        	this.discount = "0%";
                        	return;
                        }

                        if(this.asset.unapprovedDiscountLimit != undefined && this.asset.unapprovedDiscountLimit >= 0){
                        	if(this.asset.requiresAddOn){
                        		if(parseFloat(discountValue) > this.asset.unapprovedDiscountLimit){
                        			console.log("Discount is greater than maximum allowed discount. Quote will be sent for approval");
                       				errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                       				type = "warning";
                       				error = true;
                        		}
                        	}else{
                        		if(parseFloat(discountValue) > this.asset.unapprovedDiscountLimit){
                       				console.log("Discount cannot be greater than maximum allowed discount");
                       				errorMsg = "Discount cannot be greater than maximum allowed discount";
                       				type = "error";
                       				this.discount = this.asset.unapprovedDiscountLimit + '%';
                       				error = true;
                        		}
                        	}
                        }

                        if(parseFloat(this.asset.listPrice) > 0){
	                       	if(discountValue > 100){
	                       		this.discount = "100%";
	                       	}
                       	}

                    }else{
                    	if(!this.discount){
	                		this.discount = undefined;
	                	}else if(this.discount < 0){
	                		this.discount = 0;
	                	}

	                	if(this.asset.unapprovedDiscountLimit != undefined && this.asset.unapprovedDiscountLimit >= 0){
	                		var discountValue = (parseFloat(this.asset.discount) * 100)/this.asset.listPrice;
	                		if(this.asset.requiresAddOn){
                        		if(discountValue > this.asset.unapprovedDiscountLimit){
                       				errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                       				type = "warning";
                       				error = true;
                        		}
                        	}else{
                        		if(discountValue > this.asset.unapprovedDiscountLimit){
                       				errorMsg = "Discount cannot be greater than maximum allowed discount";
                       				type = "error";
                       				this.discount = ((this.asset.unapprovedDiscountLimit/100)*this.asset.listPrice).toString();
                       				error = true;
                        		}
                        	}
	                	}

	                	/* Dont alllow discount to be greater than list price only when list price is positive
	                	   because for negative list price there can be positive discount. Espcially for Sweden
	                	*/
	                	if(parseFloat(this.asset.listPrice) > 0){
		                	if(parseFloat(this.discount) > parseFloat(this.asset.listPrice)){
		                		this.discount = this.asset.listPrice.toString();
		                	}
	                	}
                    }


                    if(error){
                		this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                	}
                }
            },
            template: `<tr>
                          <th scope="row" data-label="Category Name">
                            <div class="slds-truncate" title="categoryName">
                                {{ asset.categoryName }}
                            </div>
                          </th>
                          <td data-label="Products">
                            <div class="slds-truncate" title="Products">
                                {{ asset.productName }}
                            </div>
                          </td>
                          <td data-label="List Price">
                            <div class="slds-truncate">{{ asset.listPrice }}</div>
                          </td>
                          <td data-label="Discount">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="text" class="slds-input" v-model="discount" v-bind:disabled = "disable" v-on:change = "validateDiscount"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Quantity">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="quantity" v-bind:disabled = "disable" v-on:change = "validateQuantity"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                           <td data-label="Delivery" v-if = "showdeliveryoptions">
                            <input-select v-bind:options = "deliveryoptions" v-bind:selectedvalue = "asset.delivery"
                                            showlabel = "false"
                                           v-on:selected="populateDeliveryPicklist"
                                          >
                                </input-select>
                                <div class="slds-truncate"  v-if = "showsourcegrid">
                                  <div class="slds-form-element__control">
                                        <input type="text"  v-model="sourceGrid" class="slds-input" placeholder="Source Grid"   >
                                  </div>

							  </div>

                          </td>

                          <!-- <td data-label="Installments">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="installments" v-bind:disabled = "disable" v-on:change = "validateInstallments"/>
                                  </div>
                                </div>
                            </div>
                          </td>  ** HIDING NSTALLMENTS AS PER SP-1769           -->
                          <td data-label="Start Date">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('startDate')" v-model="startDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td data-label="End Date" v-if = "showEndDate">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('endDate')" v-model="endDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <th scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions" v-bind:selectedvalue = "billableAccountId"
                                            showlabel = "false" v-bind:disabled = "disable"
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </th>
                           <td scope="row" data-label="specifications" v-if = "showSpecifications">
                            <div class="slds-truncate" title="specifications">
                            	<textarea class="slds-textarea" v-model="asset.specifications"></textarea>
                            </div>
                          </td>

                          <td data-label="Total Amount">
                            <div class="slds-truncate">{{ totalAmount }}</div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Delete Product"
                                    v-on:click = "deleteProduct" v-bind:disabled = "asset.hasRelatedTarif || disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#delete')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Product</span>
                            </button>&nbsp;
                            <button class="slds-button slds-button_icon" title="Transfer Charge"
                                    v-on:click = "setTransferCharge" v-bind:disabled = "disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#internal_share')}" />
                              </svg>
                              <span class="slds-assistive-text">Transfer Charge</span>
                            </button> &nbsp;
                            <button class="slds-button slds-button_icon" title="Add Specifications"
                                    v-on:click = "setShowSpecifications" v-bind:disabled = "disable || !showSpecificationsButton">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#note')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Specifications</span>
                            </button>

                          </td>
                        </tr>`
        });
        // ASSETS AND BRANDING LINE ITEM COMPONENT END
        
        
        // ADD ON SECTION COMPONENT START
        Vue.component("add-on-section", {
            props: ["addons","addonoptions","emptyaddon","locked","disable"],
            data: function(){
                return {
                    emptyAddOnItem : this.emptyaddon,
                    disabled : false,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                }
            },
            methods: {
                addAddOn: function(value){
                    this.addons.push(value);
                    this.emptyAddOnItem = this.emptyaddon;
                    this.emptyAddOnItem.hasRelatedTarif = false;
                },
                deleteAddOn: function(index){
                    this.addons.splice(index,1);
                },
                setAddOn: function(value){
                    this.emptyAddOnItem = value;
                }
            },
            template: `<div class="slds-panel" >
                        <div class="slds-panel__section slds-border_bottom">
                            <div class="slds-form slds-form_stacked">
                                <div class="slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x">
                                    <h2 class="slds-truncate slds-text-heading_small" title="Add On Section">Add Ons</h2>
                                    <table class="slds-table slds-table_cell-buffer">
                                        <thead>
                                            <tr class="slds-text-title_caps">
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Add On Name">Add-On Name</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Type">Type</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Contract Addition">Contract Addition</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Specifications">Specifications</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Start Date">Start Date</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="End Date">End Date</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Action">Action</div>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <add-on-selection v-bind:addon="emptyAddOnItem"
                                                    v-bind:addonoptions = "addonoptions"
                                                    v-bind:disable = "disabled"
                                                    v-on:addaddon ="addAddOn"
                                                    v-if = "!locked && !disable"
                                                    v-on:setaddon = "setAddOn"/>
                                            <add-on-lineitem v-for = "(addon,index) in addons"
                                                    v-bind:addon = "addon"
                                                    v-bind:index = "index"
                                                    v-bind:disable = "disable"
                                                    v-on:deleteaddon = "deleteAddOn" />
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>`
        });
        // ADD ON SECTION COMPONENT END
        
        
        // ADD ON SELECTION COMPONENT START
        Vue.component("add-on-selection", {  
            props: ["addon","addonoptions","disable"],
            data: function(){
                return {
                    addOnId : '',
                    startDate: undefined,
                    endDate: undefined,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    profileName: "{!$Profile.Name}"
                }
            },
            created: function(){
            	this.startDate 	= moment().format('DD-MM-YYYY');
            },
            methods:{
               fetchAddOnDetails: function(value){
                    this.addOnId = value;
                    var self = this;
                    // Fetch all the products based on the category
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.fetchAddOnDetails}',
                        value,
                        function (result, event) {

                            // Checks event status
                            if (!event.status || !result) {
                                console.error('Error in Fetching Add On  details : ', event.message)
                                self.errorState.setErrorMsg({
                                    msg: "An error occurred while fetching the Add Ons",
                                    type: "error"
                                });
                                return;
                            }
                            
                            self.$emit("setaddon",result);
                            console.log("Add On details fetched successfully " + result.length);
                        }, {
                            escape: false
                        }
                    );
                },
                addAddOn: function(){
                    this.addOnId = '';
                    this.addon.startDate = moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                    this.startDate = moment.utc().format('DD-MM-YYYY');
                    if(this.endDate){
                    	this.addon.endDate 	= moment.utc(this.endDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                    	this.endDate 		= undefined;
                    }
                    this.addon.hasRelatedTarif = false;
                    this.$emit("addaddon",this.addon);
                },
                validateDates: function(){
                	this.errorState.clearErrorMsg();
                	if(this.endDate){
                		if(moment.utc(this.endDate,'DD-MM-YYYY') < moment.utc(this.startDate,'DD-MM-YYYY')){
                			this.endDate = null;
                			this.errorState.setErrorMsg({
	                            msg: "End Date cannot be less than Start date",
	                            type: "Error"
	                        });
                		}
                	}
                },
                openDatepicker: function(value) {
                    var self = this;
                    
                    if(this[value]){
	                    vueBus.$emit("bus-open-datepicker",moment(self.startDate,'DD-MM-YYYY').format() , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }else{
                    	vueBus.$emit("bus-open-datepicker",this[value] , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }
                }, 
            },
            template: `<tr>
                          <th scope="row" data-label="Add On Name">
                            <div class="slds-truncate" title="Add On Name">
                                <input-select v-bind:options = "addonoptions" v-bind:selectedvalue = "addOnId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="fetchAddOnDetails">
                                </input-select>
                            </div>
                          </th>
                          <td data-label="Type">
                            <div class="slds-truncate">{{ addon.type }}</div>
                          </td>
                          <td data-label="Contract Addition">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                	<textarea class="slds-textarea" v-model="addon.contractAddition" 
                                		:readonly="profileName != 'System Administrator'"></textarea>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Specifications">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    <textarea class="slds-textarea" v-model="addon.specifications"></textarea>
							  </div>
							</div>
                          </td>
                          <td data-label="Start Date">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('startDate')" v-model="startDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td data-label="End Date">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('endDate')" v-model="endDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Add Add-On"
                                    v-on:click = "addAddOn" v-bind:disabled = "!addon.Id">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#add')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Add-On</span>
                            </button>
                          </td>
                        </tr>`
        });
        // ADD ON SELECTION COMPONENT END
        
        
        // ADD ON LINE ITEM COMPONENT START
        Vue.component("add-on-lineitem", {
            props: ["addon","index","disable"],
            data: function(){
            	return {
            		startDate: undefined,
            		endDate: undefined,
            		errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    profileName: "{!$Profile.Name}"
            	}
            },
            created: function(){
            	this.startDate = moment.utc(this.addon.startDate).format('DD-MM-YYYY');
            	if(this.addon.endDate){
            		this.endDate = moment.utc(this.addon.endDate).format('DD-MM-YYYY');
            	}
            },
            updated: function(){
            	this.startDate = moment.utc(this.addon.startDate).format('DD-MM-YYYY');
            	if(this.addon.endDate){
            		this.endDate = moment.utc(this.addon.endDate).format('DD-MM-YYYY');
            	}
            },
            watch: {
            	startDate: function(){
            		this.addon.startDate 	= moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
            	},
            	endDate: function(){
            		if(this.endDate){
            			this.addon.endDate		= moment.utc(this.endDate,'DD-MM-YYYY').format('YYYY-MM-DD');
            		}else{
            			this.addon.endDate		= undefined;
            		}
            	}
            },
            methods: {
                deleteAddOn: function(){
                    this.$emit("deleteaddon",this.index);
                },
                validateDates: function(){
                	this.errorState.clearErrorMsg();
                	if(this.endDate){
                		if(moment.utc(this.endDate,'DD-MM-YYYY') < moment.utc(this.startDate,'DD-MM-YYYY')){
                			this.endDate = null;
                			this.errorState.setErrorMsg({
	                            msg: "End Date cannot be less than Start date",
	                            type: "Error"
	                        });
                		}
                	}
                },
                openDatepicker: function(value) {
                    var self = this;
                    
                    if(this[value]){
	                    vueBus.$emit("bus-open-datepicker",moment(self.startDate,'DD-MM-YYYY').format() , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }else{
                    	vueBus.$emit("bus-open-datepicker",this[value] , function(val) {
	                        self[value] = val;
	                        self.validateDates();
	                    });
                    }
                }, 
            },
            template: `<tr>
                          <th scope="row" data-label="Add-On Name">
                            <div class="slds-truncate" title="addOnName">
                                {{ addon.name }}
                            </div>
                          </th>
                          <td data-label="Type">
                            <div class="slds-truncate">{{ addon.type }}</div>
                          </td>
                          <td data-label="Contract Addition">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <textarea class="slds-textarea" v-model="addon.contractAddition" v-bind:disabled = "disable" 
                                    	:readonly="profileName != 'System Administrator'"></textarea>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Specifications">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    <textarea class="slds-textarea" v-model="addon.specifications" v-bind:disabled = "disable"></textarea>
							  </div>
							</div>
                          </td>
                          <td data-label="Start Date">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('startDate')" v-model="startDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td data-label="End Date">
                          	<div class="slds-truncate">
							  <div class="slds-form-element__control">
							    	<input type="text" readonly @focus="openDatepicker('endDate')" v-model="endDate" class="slds-input">
							  </div>
							</div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Delete Add-On"
                                    v-on:click = "deleteAddOn" v-bind:disabled = "addon.hasRelatedTarif || disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#delete')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Add-On</span>
                            </button>
                          </td>
                        </tr>`
        });
        // ADD ON LINE ITEM COMPONENT END
        
        //******************************************* PREMIUM PLACEMENT SECTION START****************************************
       	Vue.component("premium-placement-component", {
            props: ["bookings","availablebookings","disable","billableaccountoptions"],         
            data: function(){
            	return {
            		selectedId: '',
            		total: 0,
            	}
            },   
            created: function(){
            	this.selectedId = this.availablebookings[0].platform+'0'+'_item';
            },
            methods: {
            	setSelectionId: function(value){
            		this.selectedId = value;
            	},
            	calculateTotal: function(){
           			this.total = 0;
           			for(i=0;i<this.availablebookings.length;i++){
           				for(j=0;j<this.availablebookings[i].bookings.length;j++){
           					if(this.availablebookings[i].bookings[j].booked){
           						this.total += parseFloat(this.availablebookings[i].bookings[j].totalAmount);
           					}
           				}
           			}
           			this.total = this.total.toFixed(2);
            	},
            },
            template: `<div>
            			<bookings-section v-bind:bookings = "bookings" v-bind:billableaccountoptions = "billableaccountoptions"/>
            			<div class="slds-panel__section slds-border_bottom" v-if = "!disable">
                            <div class="slds-form slds-form_stacked">
                                <div class="slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x">
                                    <h2 class="slds-truncate slds-text-heading_small" title="Premium Placement">Premium Placement</h2>
                                    <div class="slds-tabs_default">
                                    	<ul class="slds-tabs_default__nav" role="tablist">
                                    		<pp-tab-header v-for = "(wrapper,index) in availablebookings" 
                                    			v-bind:platform = "wrapper.platform"
                                    			v-bind:index = "index" 
                                    			v-bind:selectedid = "selectedId"
                                    			v-on:displaytabcontent = "setSelectionId"
                                    			:key = "index"/>
                                    	</ul>
                                    	<pp-tab-body v-for = "(wrapper,index) in availablebookings" 
                                    		v-bind:wrapper = "wrapper"
                                    		v-bind:index = "index"
                                    		v-bind:disable = "disable"
                                    		v-bind:selectedid = "selectedId" 
                                    		v-bind:billableaccountoptions = "billableaccountoptions"
                                    		v-on:calculatetotal = "calculateTotal"
                                    		:key = "index"/>
                                   	</div>
                                   	<div class = "slds-float_right">
                                   		<h2 class="slds-truncate slds-text-heading_small" title="Total">
                                   			Total: {{ total }}
                                 		</h2>
                                  	</div>
                                </div>
                            </div>
                        </div>
            		  </div>`
        });
        //******************************************* PREMIUM PLACEMENT SECTION END ****************************************
        
        
        //******************************************* PP BOOKING SECTION START *****************************************//
        Vue.component("bookings-section", {
            props: ["bookings","billableaccountoptions"],
            data: function(){
            	return {
            		total:0,
            		isTransferCharge: false,
            		companyName: ''
            	}
            },
            created: function(){
            	for(i=0;i<this.bookings.length;i++){
            		if(this.bookings[i].totalAmount)
            			this.total += parseFloat(this.bookings[i].totalAmount);
            	}
            	this.total = this.total.toFixed(2);
            	this.companyName = this.bookings[0] ? this.bookings[0].companyName : '';
            	this.isTransferCharge = this.checkIfTransferChargeIsThere();
            },
            methods: {
            	checkIfTransferChargeIsThere: function(){
            		for(i=0;i<this.bookings.length;i++){
            			if(this.bookings[i].billableAccountId){
            				return true;
            			}
            		}
            		
            		return false;
            	}
            },
            template: `<div class="slds-panel" >
                        <div class="slds-panel__section slds-border_bottom">
                            <div class="slds-form slds-form_stacked">
                                <div class="slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x">
                                    <h2 class="slds-truncate slds-text-heading_small" title="Booked">Booked</h2>
                                    <table class="slds-table slds-table_cell-buffer">
                                        <thead>
                                            <tr class="slds-text-title_caps">
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Booking Id">Booking Id</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Platform">Platform</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Product Name">Product Name</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Zip Code">{{ companyName.startsWith('PedidosYa') ? 'Area' : 'Zip Code' }}</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Position">Position</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="List Price">List Price</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Start Date">Start Date</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="End Date">End Date</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Discount">Discount</div>
                                                </th>
                                                <th scope="col" v-if = "isTransferCharge">
                                                    <div class="slds-truncate" title="Transfer Charge">Billable Account</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Total Amount">Total Amount</div>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <bookings-lineitem v-for = "(booking,index) in bookings"
                                                    v-bind:booking = "booking"
                                                    v-bind:istransfercharge = "isTransferCharge"
                                                    defaultvalue = undefined
                                                    v-bind:billableaccountoptions = "billableaccountoptions"
                                                    :key = "index"/>
	                                        <tr>
	                                        	<td scope="col" v-bind:colspan = "isTransferCharge ? 10 : 9">
	                                                <div class="slds-truncate slds-float_right" title="Total"><b>Total</b></div>
	                                            </td>
	                                            <td>
	                                            	<div class="slds-truncate" title="Total"><b>{{ total }}</b></div>
	                                            </td>
	                                        </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>`
        });
        //******************************************* PP BOOKING SECTION END *****************************************//
        
        //******************************************* PP BOOKING LINE ITEM START *************************************
        Vue.component("bookings-lineitem", {
            props: ["booking","istransfercharge","billableaccountoptions"],
            data: function(){
            	return{
            		startDate: undefined,
            		endDate: undefined,
            	}
            },
            created: function(){
            	this.startDate	= moment.utc(this.booking.startDate).format('DD-MM-YYYY');
            	this.endDate	= moment.utc(this.booking.endDate).format('DD-MM-YYYY');
            	this.booking.startDate	= moment.utc(this.booking.startDate).format('YYYY-MM-DD');
            	this.booking.endDate	= moment.utc(this.booking.endDate).format('YYYY-MM-DD');
            },
            updated: function(){
            	this.booking.startDate	= moment.utc(this.booking.startDate).format('YYYY-MM-DD');
            	this.booking.endDate	= moment.utc(this.booking.endDate).format('YYYY-MM-DD');
            },
            template: `<tr>
                          <th scope="row" data-label="Booking Id">
                            <div class="slds-truncate" title="bookingId">
                                {{ this.booking.bookingId}}
                            </div>
                          </th>
                          <th scope="row" data-label="Booking Id">
                            <div class="slds-truncate" title="bookingId">
                                {{ this.booking.companyName }}
                            </div>
                          </th>
                          <td data-label="Product Name">
                            <div class="slds-truncate">
                            	{{ this.booking.productName }}
                            </div>
                          </td>
                          <td data-label="Zip Code">
                            <div class="slds-truncate">
                                 {{ this.booking.postcode }}
                            </div>
                          </td>
                          <td data-label="Position">
                          	<div class="slds-truncate">
							  	{{ this.booking.restaurantPosition }} 
							</div>
                          </td>
                          <td data-label="List Price">
                          	<div class="slds-truncate">
							  	{{ this.booking.listPrice }}
							</div>
                          </td>
                          <td data-label="Start Date">
                          	<div class="slds-truncate">
							  	{{ this.startDate }}
							</div>
                          </td>
                          <td data-label="End Date">
                          	<div class="slds-truncate">
							  	{{ this.endDate }}
							</div>
                          </td>
                          <td data-label="Discount">
                          	<div class="slds-truncate">
							  	{{ this.booking.discount }}
							</div>
                          </td>
                          <td scope="row" data-label="BillableAccount" v-if = "istransfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions"
                                			v-if = "booking.billableAccountId"
                                            showlabel = "false"
                                            disabled = "true"
                                            defaultvalue = undefined
                                            v-bind:selectedvalue = "booking.billableAccountId"
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </td>
                          <td data-label="Total Amount">
                          	<div class="slds-truncate">
							  	{{ this.booking.totalAmount }}
							</div>
                          </td>
                        </tr>`
        });
        //******************************************* PP BOOKING LINE ITEM END *************************************
        
        
        //******************************************** PP TAB HEADER START *******************************************
        Vue.component("pp-tab-header", {
            props: ["platform","index","selectedid"],
            data: function(){
            	return{
            		uniqueId: this.platform+this.index+'_item',
            		isSelected: false,
            	}
            },
            created: function(){
            	if(this.index == 0){
            		this.isSelected = true;
            		this.$emit("displaytabcontent",this.uniqueId);
            	}
            },
            watch: {
            	selectedid: function(){
	            	if(this.uniqueId == this.selectedid){
	            		this.isSelected = true;
	            	}else{
	            		this.isSelected = false;
	            	}
            	}
            },
            computed: {
            	tabIndex: function(){
            		if(this.isSelected){
            			return 0;
            		}
            		
            		return -1;
            	}
            },
            methods: {
            	displayTabContent(){
            		this.$emit("displaytabcontent",this.uniqueId);
            	}
            },
            template: `<li class="slds-tabs_default__item " v-bind:class = "{'slds-has-focus': isSelected}" v-bind:title="platform" role="presentation">
					    	<a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" v-bind:tabindex="tabIndex" 
					    		v-bind:aria-selected="isSelected" v-bind:aria-controls="uniqueId" v-bind:id="uniqueId"
					    		v-on:click = "displayTabContent">
					    			{{ platform }}
				    			</a>
		    			</li>`
        });
        //******************************************** PP TAB HEADER END *******************************************
        
        //******************************************** PP TAB BODY START *******************************************
        //******************************************** PP TAB HEADER START *******************************************
        Vue.component("pp-tab-body", {
            props: ["wrapper","index","selectedid","disable","billableaccountoptions"],
            data: function(){
            	return{
            		uniqueId: this.wrapper.platform+this.index+'_item',
            		transferCharge: false,
            	}
            },
            created: function(){
            	// Check whether if any line items has transferred charges 
                this.transferCharge = this.checkForTransferCharge();
            },
            computed: {
            	isSelected: function(){
            		if(this.uniqueId == this.selectedid){
            			return true;
            		}
            		return false;
            	}
            },
            methods: {
            	calculatetotal: function(){
            		this.$emit("calculatetotal");
            	},
            	checkForTransferCharge: function(){
                	for(var i=0; i< this.wrapper.bookings.length; i++){
                		if(this.wrapper.bookings[i].billableAccountId){
                			return true;
                		}
                	}              	
                	return false;
                },
                setTransferCharge: function(){
                	this.transferCharge = !this.transferCharge;
                }
            },
            template: `<div v-bind:id="uniqueId" class="slds-tabs_default__content" 
            				v-bind:class = "{ 'slds-show' : isSelected , 'slds-hide' : !isSelected }" role="tabpanel" 
					  		aria-labelledby="uniqueId">
					  			<bookings-selection
	            		   			v-bind:bookings = "wrapper.bookings"
	            		   			v-bind:platform = "wrapper.platform"
	            		   			v-bind:transfercharge = "transferCharge"
	            		   			v-bind:disable = "disable"
	            		   			v-bind:billableaccountoptions = "billableaccountoptions"
	            		   			v-on:settransfercharge = "setTransferCharge"
	            		   			v-on:calculatetotal = "calculatetotal" />
	  				   </div>`
        });
        //******************************************** PP TAB BODY END *******************************************
        
        //******************************************* PP BOOKING SELECTION SECTION START *****************************************//
        Vue.component("bookings-selection", {
            props: ["bookings","platform","transfercharge","disable","billableaccountoptions"],
            data: function(){
            	return{
            		total: 0,
           		}
            },  
            created: function(){
            	for(i=0;i<this.bookings.length;i++){
            		this.bookings[i].booked = false;
            	}
            },
            methods: {
            	calculateTotal: function(){
            		this.total = 0;
            		for(i=0;i<this.bookings.length;i++){
            			if(this.bookings[i].booked){
            				this.total += parseFloat(this.bookings[i].totalAmount);
            			}
            		}
            		this.total = this.total.toFixed(2)
            		
            		this.$emit("calculatetotal");
            	},
            	setTransferCharge: function(){
                	this.$emit("settransfercharge");
                },
            },
            template: `
                       <table class="slds-table slds-table_cell-buffer">
                           <thead>
                               <tr class="slds-text-title_caps">
                                   <th scope="col">
                                       <div class="slds-truncate slds-align_absolute-center" title="Zip Code">Zip Code</div>
                                   </th>
                                   <th scope="col">
                                       <div class="slds-truncate slds-align_absolute-center" title="Coverage">Coverage</div>
                                   </th>
                                   <th scope="col">
                                       <div class="slds-truncate slds-align_absolute-center" title="Distance">Distance</div>
                                   </th>
                                   <th scope="col">
                                       <div class="slds-truncate slds-align_absolute-center" title="Base Price">Base Price</div>
                                   </th>
                                   <th scope="col">
                                       <div class="slds-truncate slds-align_absolute-center" title="Packages">Packages</div>
                                   </th>
                                   <th scope="col">
                                       <div class="slds-truncate slds-align_absolute-center" title="Available Slots">Available Slots</div>
                                   </th>
                                   <th scope="col">
                                       <div class="slds-truncate slds-align_absolute-center" title="Prie">Price</div>
                                   </th> 
                                   <th scope="col" v-if = "transfercharge">
                                       <div class="slds-truncate" title="Transfer charge to">Transfer charge to</div>
                                   </th>
                                   <th scope="col">
                                       <div class="slds-truncate slds-align_absolute-center" title="Action">Action</div>
                                   </th>
                               </tr>
                           </thead>
                           <tbody>
                               <bookings-selection-lineitem v-for = "(booking,index) in bookings"
                                       v-bind:booking = "booking"
                                       v-on:calculatetotal = "calculateTotal"
                                       v-bind:transfercharge = "transfercharge"
                                       v-bind:disable = "disable"
                                       v-bind:billableaccountoptions = "billableaccountoptions"
                                       v-on:settransfercharge = "setTransferCharge"
                                       :key = "index"/>
								<td data-label="Total"  v-bind:colspan = "transfercharge ? 7 : 6" >
                                  <div class="slds-truncate slds-float_right" ><b>Total</b></div>
                               </td>
                               <td data-label="Total" >
                                   <div class="slds-truncate" >{{ this.total }}</div>
                                </td>                                          
                           </tbody>
                       </table>`
        });
        //******************************************* PP BOOKING SELECTION SECTION END *****************************************//
        
        //******************************************* PP BOOKING SELECTION LINE ITEM START *************************************
        Vue.component("bookings-selection-lineitem", {
            props: ["booking","transfercharge","billableaccountoptions","disable"],
            data: function(){
            	return {
            		totalAmount: undefined,
            		listPrice: undefined,
            		booked: false,
            	}
            },
            created: function(){ 
            	this.booked = false;
            	// Populate initial position and prices
            	for(i=0;i<this.booking.packageOptions.length;i++){
            		if(this.booking.packageOptions[i].selected){
            			this.populatePriceAndPosition(this.booking.packageOptions[i].value);
            		}
            	}
            },
            updated: function(){
            	console.log("Update called for PP");
            },
            methods: {
            	populatePriceAndPosition: function(value){
            		console.log("Change of package called " + value);
            		for(i=0;i<this.booking.restaurant_packages.length;i++){
            			if(this.booking.restaurant_packages[i].description == value){
            				this.booking.restaurantPosition 		= this.booking.restaurant_packages[i].description;
            				this.booking.listPrice 					= this.booking.restaurant_packages[i].price;
            				this.booking.packageId					= this.booking.restaurant_packages[i].id;
            				this.totalAmount						= this.booking.restaurant_packages[i].price;
            				this.listPrice							= this.booking.restaurant_packages[i].price;
            			}
            			
            		}
            	},
            	makeBooking: function(){
            		this.booking.totalAmount	= this.totalAmount;
            		this.booking.booked		= true;
            		this.booked				= true;
            		this.calculateDiscount();
            		this.$emit("calculatetotal");
            	},
            	clearBooking: function(){
            		this.booking.booked		= false;
            		this.booked				= false;
            		this.$emit("calculatetotal");
            	},
            	calculateDiscount: function(){
            		if(this.totalAmount < this.listPrice){
            			this.booking.discount = (this.listPrice - this.totalAmount).toFixed(2);
            		}else{
            			this.booking.discount = 0;
            		}
            	},
            	popuateBillableAccount: function(value){
                	if(value)
                		this.booking.billableAccountId = value;
                	else
                		this.booking.billableAccountId = undefined;
                },
                setTransferCharge: function(){
                	this.$emit("settransfercharge");
                },
            },
            watch: {
            	transfercharge: function(){
            		if(!transfercharge){
            			this.booking.billableAccountId = undefined;
            		}
            	}
            },
            template: `<tr>
                          <th scope="row" data-label="Zip Code">
                            <div class="slds-truncate slds-align_absolute-center" title="zipCode">
                                {{ booking.postcode }}
                            </div>
                          </th>
                          <td data-label="Coverage">
                            <div class="slds-truncate slds-align_absolute-center">
                            	{{ booking.coverage }}
                            </div>
                          </td>
                          <td data-label="Distance">
                            <div class="slds-truncate slds-align_absolute-center">
                                {{ booking.distance }} {{ booking.distance_units}}
                            </div>
                          </td>
                          <td data-label="base Price">
                          	<div class="slds-truncate slds-align_absolute-center">
							  	{{ booking.price_base }}
							</div>
                          </td>
                          <td data-label="Packages">
                          	<div class="slds-truncate slds-align_absolute-center">
							  	<input-select v-bind:options = "booking.packageOptions"
                                            showlabel = "false" v-bind:disabled = "booked"
                                            v-on:selected = "populatePriceAndPosition">
                                </input-select>
							</div>
                          </td>
                          <td data-label="Available Slots">
                          	<div class="slds-truncate slds-align_absolute-center">
							  	{{ booking.available_items }}
							</div>
                          </td>
                          <td data-label="Price">
                          	<div class="slds-truncate">
							  	<div class="slds-truncate">
							  		<div class="slds-grid">
									  <div class="slds-col slds-size--2-of-3">
								  		<div class="slds-form-element__control">
		                                    <input type="number" class="slds-input" v-model="totalAmount" v-bind:disabled = "booked"/>
		                                </div>
									  </div>
									  <div class="slds-col slds-size--1-of-3">
		                                	<label class="slds-form-element__label">/ {{ this.listPrice }} </label>
									  </div>
									</div>
	                            </div>
							</div>
                          </td>
                          <td scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions"
                                            showlabel = "false"
                                            v-bind:disabled = "disable || booked"
                                            defaultvalue = undefined
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </td>
                          <td data-label="Action">
                          	<div class="slds-truncate slds-align_absolute-center">
							  	<button class="slds-button slds-button_icon" title="Make Booking"
	                                     v-on:click = "makeBooking" v-if = "!booked">
	                              <svg class="slds-button__icon" aria-hidden="true">
	                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
	                                     xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#add')}" />
	                              </svg>
	                              <span class="slds-assistive-text">Make Booking</span>
	                            </button>
							  	<button class="slds-button slds-button_icon" title="Clear Booking"
	                                     v-on:click = "clearBooking" v-if = "booked">
	                              <svg class="slds-button__icon" aria-hidden="true">
	                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
	                                     xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#clear')}" />
	                              </svg>
	                              <span class="slds-assistive-text">Clear Booking</span>
	                            </button>
	                            <button class="slds-button slds-button_icon" title="Transfer Charge"
	                                    v-on:click = "setTransferCharge" v-bind:disabled = "disable">
	                              <svg class="slds-button__icon" aria-hidden="true">
	                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
	                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#internal_share')}" />
	                              </svg>
	                              <span class="slds-assistive-text">Transfer Charge</span>
	                            </button>
							</div>
                          </td>
                        </tr>`
        });
        //******************************************* PP BOOKING SELECTION LINE ITEM END *************************************
        
        // BUTTON SECTION COMPONENT START
        Vue.component("button-section", {
            props:["disable"],
            methods: {
               save: function(){
                   this.$emit("save");
               },
               createQuote: function(){
                   this.$emit("createquote");
               }
            },
            template: `<div class="slds-panel" >
                            <div class="slds-panel__section slds-border_bottom">
                                <div class="slds-form slds-form_stacked">
                                    <div class="slds-align_absolute-center slds-p-horizontal_small slds-size_1-of-1">
                                        <button class="slds-button slds-button_brand" v-on:click="save" v-bind:disabled = "disable">
                                            <span>
                                            <svg class="slds-button__icon_stateful slds-button__icon_left" aria-hidden="true">
                                              <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                                    xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#save')}" />
                                            </svg>Save</span>
                                        </button>
                                        <button class="slds-button slds-button_brand" v-on:click="createQuote" v-bind:disabled = "disable">
                                            <span>
                                            <svg class="slds-button__icon_stateful slds-button__icon_left" aria-hidden="true">
                                              <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                                    xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#file')}" />
                                            </svg>Create Quote</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>`
        });
        // BUTTON SECTION COMPONENT END
        // BUTTON SECTION UNLOCCOMPONENT START
        Vue.component("button-section-unlock", {
            props:["disable"],
            methods: {
               unlock: function(){
                   this.$emit("unlock");
               }
            },
            template: `<div class="slds-panel" >
                            <div class="slds-panel__section slds-border_bottom">
                                <div class="slds-form slds-form_stacked">
                                    <div class="slds-align_absolute-center slds-p-horizontal_small slds-size_1-of-1">
                                        <button class="slds-button slds-button_brand" v-on:click="unlock" v-bind:disabled = "disable">
                                            <span>
                                            <svg class="slds-button__icon_stateful slds-button__icon_left" aria-hidden="true">
                                              <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                                    xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#reset_password')}" />
                                            </svg>Unlock</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>`
        });
        // BUTTON SECTION COMPONENT END
        // SSC-1932:Changes Starts From Here
        //Austria PP COMPONENT START
        // ******************************BASIC ADDITIONAL CHARGES SECTION COMPONENT AT START*********************************
        Vue.component("additional-charges-section-at", {
            props: ["products","categoryoptions","billableaccountoptions","emptyproduct","locked","disable","iso","showPostal"],
            data: function(){
                return {
                    emptyProductItem : this.emptyproduct,
                    disabled : false,
                    total: 0,
                    transferCharge: false,
                    showSpecifications: false,
                    showSpecificationsButton: false,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    showEndDate: false,
                    showPostalCol: false,
                }
            },
            created: function(){

                // If the country is Sweden show the end Date
                if(this.iso == 'DO' || this.iso == 'SE' || this.iso == 'FI' || this.iso == 'AR' || this.iso == 'UY' || this.iso == 'CL' || this.iso == 'PY' || this.iso == 'BO' || this.iso == 'PA' || this.iso =='HU'){
                this.showEndDate = true;
                }
                // Check whether if any line items has transferred charges
                this.transferCharge             = this.checkForTransferCharge();
                // Check whether to display the show specifications button
                this.showSpecificationsButton   = {!$Permission.specifyLineItemDescription}
                // check whether the additional charges has specifications
                this.showSpecifications         = this.checkForSpecifications();

                this.calculateTotal();
            },
            updated: function(){
                //this.calculateTotal();
            },
            methods: {
                addProduct: function(value){
                    this.errorState.clearErrorMsg();
                    this.products.push(value);
                    this.calculateTotal();
                    this.emptyProductItem = this.emptyproduct;
                    this.emptyProductItem.hasRelatedTarif = false;
                },
                deleteProduct: function(index){
                    this.errorState.clearErrorMsg();
                    this.products.splice(index,1);
                    this.calculateTotal();
                },
                calculateTotal: function(){
                    console.log("Calculating total");
                    this.total = 0;
                    for(i=0;i<this.products.length;i++){
                        if(this.products[i].totalAmount)
                            this.total += parseFloat(this.products[i].totalAmount);
                    }
                    this.total = this.total.toFixed(2);
                    return this.total;
                },
                populateProduct: function(value){
                    this.emptyProductItem = value;
                },
                checkForTransferCharge: function(){
                    for(var i=0; i< this.products.length; i++){
                        if(this.products[i].billableAccountId){
                            return true;
                        }
                    }
                    return false;
                },
                checkForSpecifications: function(){
                    if(!this.showSpecificationsButton)
                        return false;
                    for(var i=0; i< this.products.length; i++){
                        if(this.products[i].specifications){
                            return true;
                        }
                    }
                    return false
                },
                setTransferCharge: function(){
                    this.transferCharge = !this.transferCharge;
                },
                setShowSpecifications: function(){
                    this.showSpecifications = !this.showSpecifications;
                }
            },
            watch: {
                products: function(){
                    this.calculateTotal();
                }
            },
            computed:{
                numberOfColumns: function(){
                    var totalCols = 6;
                    if(this.showEndDate)
                        totalCols++;
                    if(this.transferCharge)
                        totalCols++;
                    if(this.showSpecifications)
                        toalCols++;

                    return totalCols;
                }
            },
            template: `<div class="slds-panel" >
                        <div class="slds-panel__section slds-border_bottom">
                            <div class="slds-form slds-form_stacked">
                                <div class="slds-p-horizontal_small slds-size_1-of-1 slds-scrollable--x">
                                    <h2 class="slds-truncate slds-text-heading_small" title="Additional Charges">Additional Charges</h2>
                                    <table class="slds-table slds-table_cell-buffer">
                                        <thead>
                                            <tr class="slds-text-title_caps">
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Product Group">Product Group</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Product Name">Product Name</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Postal Code">Postal Code</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="List Price">List Price</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Discount">Discount</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Quantity">Quantity</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Start Date">Start Date</div>
                                                </th>
                                                <th scope="col" v-if = "showEndDate">
                                                    <div class="slds-truncate" title="End Date">End Date</div>
                                                </th>
                                                <th scope="col" v-if = "transferCharge">
                                                    <div class="slds-truncate" title="Transfer charge to">Transfer charge to</div>
                                                </th>
                                                <th scope="col" v-if = "showSpecifications">
                                                    <div class="slds-truncate" title="Specifications">Specifications</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Total Amount">Total Amount</div>
                                                </th>
                                                <th scope="col">
                                                    <div class="slds-truncate" title="Action">Action</div>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <additional-charges-selection-at v-bind:product="emptyProductItem"
                                                    v-bind:categoryoptions = "categoryoptions"
                                                    v-bind:disable = "disabled"
                                                    v-bind:transfercharge = "transferCharge"
                                                    v-bind:showSpecifications = "showSpecifications"
                                                    v-bind:billableaccountoptions = "billableaccountoptions"
                                                    v-bind:showEndDate = "showEndDate"
                                                    v-on:addproduct ="addProduct"
                                                    v-if = "!locked && !disable"
                                                    v-on:populateproduct = "populateProduct"/>
                                            <additional-charges-lineitem-at v-for = "(product,index) in products"
                                                    v-bind:billableaccountoptions = "billableaccountoptions"
                                                    v-bind:product = "product"
                                                    v-bind:transfercharge = "transferCharge"
                                                    v-bind:showSpecifications = "showSpecifications"
                                                    v-bind:showSpecificationsButton = "showSpecificationsButton"
                                                    v-bind:index = "index"
                                                    v-bind:showEndDate = "showEndDate"
                                                    v-on:calculatetotal = "calculateTotal"
                                                    v-on:deleteproduct = "deleteProduct"
                                                    v-on:settransfercharge = "setTransferCharge"
                                                    v-on:setshowspecifications = "setShowSpecifications"
                                                    v-bind:disable = "disable"
                                                    :key = "index" />
                                             <tr>
                                                 <td data-label="Total"
                                                    v-bind:colspan = "totalCols" >
                                                    <div class="slds-truncate slds-float_right" ><b>Total</b></div>
                                                 </td>
                                                 <td data-label="Total" >
                                                    <div class="slds-truncate" >{{ total }}</div>
                                                 </td>
                                             </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>`
        });
        // ******************************BASIC ADDITIONAL CHARGES COMPONENT AT END*********************************

        // *******************************ADDITIONAL CHARGES SELECTION COMPONENT AT START*****************************
        Vue.component("additional-charges-selection-at", {
            props: ["product","categoryoptions","disable","billableaccountoptions","transfercharge","showSpecifications","showEndDate"],
            data: function(){
                return {
                    productOptions: [],
                    categoryId: '',
                    productId: '',
                    installments: undefined,
                    quantity: undefined,
                    discount: undefined,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    startDate: undefined,
                    endDate: undefined,
                    postcode: undefined
                }
            },

            created: function(){
                 this.installments  = this.product.installments;
                 this.quantity      = this.product.quantity;
                 this.discount      = this.product.discount;
                 this.startDate     = moment().format('DD-MM-YYYY');
                 //this.postcode      = this.product.postcode;
            },
            updated: function(){
                 this.installments  = this.product.installments;
                 this.quantity      = this.product.quantity;
                 this.discount      = this.product.discount;
                 this.postcode      = this.product.postcode;
            },
            methods:{
                fetchProducts : function(value){
                    console.log('fetchProducts--->',value);
                    this.categoryId = value;
                    this.productId = '';
                    var self = this;
                    // Fetch all the products based on the category
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.fetchProducts}',
                        value,
                        function (result, event) {

                            // Checks event status
                            if (!event.status || !result) {
                                console.error('Error in Fetching products : ', event.message)
                                self.errorState.setErrorMsg({
                                    msg: "An error occurred while fetching the products",
                                    type: "error"
                                });
                                return;
                            }

                            self.productOptions = result;
                            self.fetchProductDetails(self.productId);
                            console.log("Products fetched successfully " + result.length);
                        }, {
                            escape: false
                        }
                    );
                },
                fetchProductDetails: function(value){
                    this.productId = value;
                    var self = this;
                    // Fetch all the products based on the category
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.VueOpportunityLineItemController.fetchProductDetails}',
                        value,
                        function (result, event) {

                            // Checks event status
                            if (!event.status || !result) {
                                console.error('Error in Fetching product  details : ', event.message)
                                self.errorState.setErrorMsg({
                                    msg: "An error occurred while fetching the products",
                                    type: "error"
                                });
                                return;
                            }

                            self.$emit("populateproduct",result);
                            console.log("Product details fetched successfully " + result.length);
                        }, {
                            escape: false
                        }
                    );
                },
                addProduct: function(){
                    this.categoryId = '';
                    this.productId = '';
                    this.productOptions = [];
                    this.product.startDate = moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                    this.startDate = moment().format('DD-MM-YYYY');
                    this.postcode = this.product.postcode;
                    if(this.endDate){
                        this.product.endDate = moment.utc(this.endDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                        this.endDate = null;
                    }
                    this.$emit("addproduct",this.product);
                },
                popuateBillableAccount: function(value){
                    if(value)
                        this.product.billableAccountId = value;
                    else
                        this.product.billableAccountId = undefined;
                },
                validateInstallments: function(){
                    if(!this.installments){
                        this.installments = undefined;
                    }else if(this.installments < 0){
                        this.installments = 0;
                    }
                },
                validateQuantity: function(){
                    if(!this.quantity){
                        this.quantity = 1;
                    }else if(this.quantity <= 0){
                        this.quantity = 1;
                    }
                },
               validateDiscount: function(){
                    var error = false;
                    var errorMsg = '';
                    var type = '';

                    this.errorState.clearErrorMsg();

                    if (this.discount && this.discount.indexOf('%') != -1) {
                        var discountValue = this.discount.substr(0,this.discount.indexOf('%') - 0);
                        if(discountValue < 0){
                            this.discount = "0%";
                            return;
                        }

                        if(this.product.unapprovedDiscountLimit != undefined && this.product.unapprovedDiscountLimit >= 0){
                            if(this.product.requiresAddOn){
                                if(parseFloat(discountValue) > this.product.unapprovedDiscountLimit){
                                    console.log("Discount is greater than maximum allowed discount. Quote will be sent for approval");
                                    errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                                    type = "warning";
                                    error = true;
                                }
                            }else{
                                if(parseFloat(discountValue) > this.product.unapprovedDiscountLimit){
                                    console.log("Discount cannot be greater than maximum allowed discount");
                                    errorMsg = "Discount cannot be greater than maximum allowed discount";
                                    type = "error";
                                    this.discount = this.product.unapprovedDiscountLimit + '%';
                                    error = true;
                                }
                            }
                        }

                        if(parseFloat(this.product.listPrice) > 0){
                            if(discountValue > 100){
                                this.discount = "100%";
                            }
                        }

                    }else{
                        if(!this.discount){
                            this.discount = undefined;
                        }else if(this.discount < 0){
                            this.discount = 0;
                        }

                        if(this.product.unapprovedDiscountLimit != undefined && this.product.unapprovedDiscountLimit >= 0){
                            var discountValue = (parseFloat(this.product.discount) * 100)/this.product.listPrice;
                            if(this.product.requiresAddOn){
                                if(discountValue > this.product.unapprovedDiscountLimit){
                                    errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                                    type = "warning";
                                    error = true;
                                }
                            }else{
                                if(discountValue > this.product.unapprovedDiscountLimit){
                                    errorMsg = "Discount cannot be greater than maximum allowed discount";
                                    type = "error";
                                    this.discount = ((this.product.unapprovedDiscountLimit/100)*this.product.listPrice).toString();
                                    error = true;
                                }
                            }
                        }

                        /* Dont alllow discount to be greater than list price only when list price is positive
                           because for negative list price there can be positive discount. Espcially for Sweden
                        */
                        if(parseFloat(this.product.listPrice) > 0){
                            if(parseFloat(this.discount) > parseFloat(this.product.listPrice)){
                                this.discount = this.product.listPrice.toString();
                            }
                        }
                    }


                    if(error){
                        this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                    }
                },
                validateDates: function(){
                    this.errorState.clearErrorMsg();
                    if(this.endDate){
                        if(moment.utc(this.endDate,'DD-MM-YYYY') < moment.utc(this.startDate,'DD-MM-YYYY')){
                            this.endDate = undefined;
                            this.errorState.setErrorMsg({
                                msg: "End Date cannot be less than Start date",
                                type: "Error"
                            });
                        }
                    }
                },
                openDatepicker: function(value) {
                    var self = this;

                    if(this[value]){
                        vueBus.$emit("bus-open-datepicker",moment(self.startDate,'DD-MM-YYYY').format() , function(val) {
                            self[value] = val;
                            self.validateDates();
                        });
                    }else{
                        vueBus.$emit("bus-open-datepicker",this[value] , function(val) {
                            self[value] = val;
                            self.validateDates();
                        });
                    }
                },
            },
            watch: {
              totalAmount : function(){
                  this.product.totalAmount = this.totalAmount;
              },
              installments: function(){
                this.product.installments = this.installments;
              },
              quantity: function(){
                this.product.quantity = this.quantity;
              },
              discount: function(){
                this.product.discount = this.discount;
              },
              postcode: function(){
                this.product.postcode = this.postcode;
              },
            },
            computed: {
              totalAmount: function(){
                  if((this.product.listPrice == undefined && this.product.listPrice != 0) ||
                        this.product.quantity == undefined || this.product.quantity == ''){
                          return;
                  }
                  var discountValue = "0";
                  var discountAmount = 0;
                  var percentageFlag = false;
                    if(this.product.discount && this.product.discount != ''){
                        if (this.product.discount.indexOf('%') != -1) {
                            discountValue = this.product.discount.substr(0,this.product.discount.indexOf('%') - 0);
                            percentageFlag = true;
                        }else{
                            discountValue = this.product.discount;
                        }

                        if (percentageFlag) {
                            discountAmount = Math.abs(this.product.listPrice * (parseFloat(discountValue) / 100));
                        } else {
                            discountAmount = discountValue;
                        }
                    }

                    var discountedListPrice = this.product.listPrice - discountAmount;
                    var result = parseInt(this.product.quantity) * discountedListPrice;
                    result=+result.toFixed(2);

                    console.log("Total amount is " + result);
                    return result;
              }
            },
            template: `<tr>
                          <th scope="row" data-label="Category Name">
                            <div class="slds-truncate" title="categoryName">
                                <input-select v-bind:options = "categoryoptions" v-bind:selectedvalue = "categoryId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="fetchProducts">
                                </input-select>
                            </div>
                          </th>
                          <td data-label="Products">
                            <div class="slds-truncate" title="Products">
                                <input-select v-bind:options = "productOptions" v-bind:selectedvalue = "productId"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            v-on:selected="fetchProductDetails">
                                </input-select>
                            </div>
                          </td>
                          <td data-label="Postal Code">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="text" class="slds-input" v-model="postcode" v-on:change = "validatePostalCode"/>
                                </div>
                            </div>
                          </td>
                          <td data-label="List Price">
                            <div class="slds-truncate">{{ product.listPrice }}</div>
                          </td>
                          <td data-label="Discount">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="text" class="slds-input" v-model="discount" v-on:change = "validateDiscount"/>
                                </div>
                            </div>
                          </td>
                          <td data-label="Quantity">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="quantity" value="0" v-on:change = "validateQuantity"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Start Date">
                            <div class="slds-truncate">
                              <div class="slds-form-element__control">
                                    <input type="text" readonly @focus="openDatepicker('startDate')" v-model="startDate" class="slds-input">
                              </div>
                            </div>
                          </td>
                          <td data-label="End Date" v-if = "showEndDate">
                            <div class="slds-truncate">
                              <div class="slds-form-element__control">
                                    <input type="text" readonly @focus="openDatepicker('endDate')" v-model="endDate" class="slds-input">
                              </div>
                            </div>
                          </td>
                          <td scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions"
                                            showlabel = "false"
                                            v-bind:disabled = "disable"
                                            defaultvalue = undefined
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </td>
                          <td scope="row" data-label="specifications" v-if = "showSpecifications">
                            <div class="slds-truncate" title="specifications">
                                <textarea class="slds-textarea" v-model="product.specifications"></textarea>
                            </div>
                          </td>
                          <td data-label="Total Amount">
                            <div class="slds-truncate">{{ totalAmount }}</div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Add Product"
                                    v-on:click = "addProduct" v-bind:disabled = "this.totalAmount == undefined">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#add')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Product</span>
                            </button>
                          </td>
                        </tr>`
        });
        // ADDITIONAL CHARGES SELECTION COMPONENT AT END

        // ADDITIONAL CHARGES LINE ITEM COMPONENT AT START
        Vue.component("additional-charges-lineitem-at", {
            props: ["product","index","billableaccountoptions","transfercharge","disable","showEndDate","showSpecificationsButton","showSpecifications"],
            data: function(){
                return {
                    billableAccountId: '',
                    installments: undefined,
                    quantity: undefined,
                    discount: undefined,
                    errorState: errorHandlerSharedState,
                    loaderState: loaderSharedState,
                    startDate: undefined,
                    endDate: undefined,
                    postcode: undefined
                }
            },
            created: function(){
                this.$emit("calculatetotal");
                if(this.product.billableAccountId)
                    this.billableAccountId = this.product.billableAccountId;
                else
                    this.billableAccountId = '';

                 this.installments  = this.product.installments;
                 this.quantity      = this.product.quantity;
                 this.discount      = this.product.discount;
                 this.postcode      = this.product.postcode;

                 this.startDate     = moment.utc(this.product.startDate).format('DD-MM-YYYY');
                 if(this.product.endDate){
                    this.endDate        = moment.utc(this.product.endDate).format('DD-MM-YYYY');
                 }
            },
            updated: function(){
                this.installments   = this.product.installments;
                this.quantity       = this.product.quantity;
                this.discount       = this.product.discount;
                this.postcode       = this.product.postcode;
                this.startDate      = moment.utc(this.product.startDate).format('DD-MM-YYYY');
                if(this.product.endDate){
                    this.endDate        = moment.utc(this.product.endDate).format('DD-MM-YYYY');
                }
            },
            watch: {
              totalAmount : function(){
                  this.product.totalAmount = this.totalAmount;
                  this.$emit("calculatetotal");
              },
              installments: function(){
                this.product.installments = this.installments;
              },
              quantity: function(){
                this.product.quantity = this.quantity;
              },
              discount: function(){
                this.product.discount = this.discount;
              },
              postcode: function(){
                this.product.postcode = this.postcode;
              },
              transfercharge: function(){
                    if(this.billableaccountoptions[0] && this.billableaccountoptions[0].value){
                        this.billableAccountId = this.billableaccountoptions[0].value;
                        this.product.billableAccountId = this.billableAccountId;
                    }else{
                        this.billableAccountId = '';
                        this.product.billableAccountId = undefined;
                    }

                    if(!transfercharge){
                        this.billableAccountId = '';
                        this.product.billableAccountId = undefined;
                    }
              },
              startDate: function(){
                this.product.startDate = moment.utc(this.startDate,'DD-MM-YYYY').format('YYYY-MM-DD');
              },
              endDate: function(){
                if(this.endDate){
                    this.product.endDate = moment.utc(this.endDate,'DD-MM-YYYY').format('YYYY-MM-DD');
                }else{
                    this.product.endDate = null;
                }
              }
            },
            computed: {
              totalAmount: function(){
                  if((this.product.listPrice == undefined && this.product.listPrice != 0) ||
                        this.product.quantity == undefined || this.product.quantity == ''){
                          return;
                  }
                  var discountValue = "0";
                  var discountAmount = 0;
                  var percentageFlag = false;
                    if(this.product.discount && this.product.discount != ''){
                        if (this.product.discount.indexOf('%') != -1) {
                            discountValue = this.product.discount.substr(0,this.product.discount.indexOf('%') - 0);
                            percentageFlag = true;
                        }else{
                            discountValue = this.product.discount;
                        }

                        if (percentageFlag) {
                            discountAmount = Math.abs(this.product.listPrice * (parseFloat(discountValue) / 100));
                        } else {
                            discountAmount = discountValue;
                        }
                    }

                    var discountedListPrice = this.product.listPrice - discountAmount;
                    var result = parseInt(this.product.quantity) * discountedListPrice;
                    result=+result.toFixed(2);

                    this.product.totalAmount = result;
                    console.log("Total amount is " + result);
                    return result;
              }
            },
            methods: {
                deleteProduct: function(){
                    this.$emit("deleteproduct",this.index);
                },
                popuateBillableAccount: function(value){
                    if(value){
                        this.billableAccountId = value;
                        this.product.billableAccountId = value;
                    }else{
                        this.billableAccountId = '';
                        this.product.billableAccountId = undefined;
                    }
                },
                setTransferCharge: function(){
                    this.$emit("settransfercharge");
                },
                setShowSpecifications: function(){
                    this.$emit("setshowspecifications");
                },
                validateQuantity: function(){
                    if(!this.quantity){
                        this.quantity = 1;
                    }else if(this.quantity <= 0){
                        this.quantity = 1;
                    }
                },
                validateDates: function(){
                    this.errorState.clearErrorMsg();
                    if(this.endDate){
                        if(moment.utc(this.endDate,'DD-MM-YYYY') < moment.utc(this.startDate,'DD-MM-YYYY')){
                            this.endDate = null;
                            this.errorState.setErrorMsg({
                                msg: "End Date cannot be less than Start date",
                                type: "Error"
                            });
                        }
                    }
                },
                openDatepicker: function(value) {
                    var self = this;

                    if(this[value]){
                        vueBus.$emit("bus-open-datepicker",moment(self.startDate,'DD-MM-YYYY').format() , function(val) {
                            self[value] = val;
                            self.validateDates();
                        });
                    }else{
                        vueBus.$emit("bus-open-datepicker",this[value] , function(val) {
                            self[value] = val;
                            self.validateDates();
                        });
                    }
                },
                validateInstallments: function(){
                    console.log("Validate installement");
                    if(!this.installments){
                        this.installments = undefined;
                    }else if(this.installments < 0){
                        console.log("Inside zero");
                        this.installments = 0;
                    }
                },
                validateDiscount: function(){
                    var error = false;
                    var errorMsg = '';
                    var type = '';

                    this.errorState.clearErrorMsg();

                    if (this.discount && this.discount.indexOf('%') != -1) {
                        var discountValue = this.discount.substr(0,this.discount.indexOf('%') - 0);
                        if(discountValue < 0){
                            this.discount = "0%";
                            return;
                        }

                        if(this.product.unapprovedDiscountLimit != undefined && this.product.unapprovedDiscountLimit >= 0){
                            if(this.product.requiresAddOn){
                                if(parseFloat(discountValue) > this.product.unapprovedDiscountLimit){
                                    console.log("Discount is greater than maximum allowed discount. Quote will be sent for approval");
                                    errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                                    type = "warning";
                                    error = true;
                                }
                            }else{
                                if(parseFloat(discountValue) > this.product.unapprovedDiscountLimit){
                                    console.log("Discount cannot be greater than maximum allowed discount");
                                    errorMsg = "Discount cannot be greater than maximum allowed discount";
                                    type = "error";
                                    this.discount = this.product.unapprovedDiscountLimit + '%';
                                    error = true;
                                }
                            }
                        }

                        if(parseFloat(this.product.listPrice) > 0){
                            if(discountValue > 100){
                                this.discount = "100%";
                            }
                        }

                    }else{
                        if(!this.discount){
                            this.discount = undefined;
                        }else if(this.discount < 0){
                            this.discount = 0;
                        }

                        if(this.product.unapprovedDiscountLimit != undefined && this.product.unapprovedDiscountLimit >= 0){
                            var discountValue = (parseFloat(this.product.discount) * 100)/this.product.listPrice;
                            if(this.product.requiresAddOn){
                                if(discountValue > this.product.unapprovedDiscountLimit){
                                    errorMsg = "Discount is greater than maximum allowed discount. Quote will be sent for approval";
                                    type = "warning";
                                    error = true;
                                }
                            }else{
                                if(discountValue > this.product.unapprovedDiscountLimit){
                                    errorMsg = "Discount cannot be greater than maximum allowed discount";
                                    type = "error";
                                    this.discount = ((this.product.unapprovedDiscountLimit/100)*this.product.listPrice).toString();
                                    error = true;
                                }
                            }
                        }

                        /* Dont alllow discount to be greater than list price only when list price is positive
                           because for negative list price there can be positive discount. Espcially for Sweden
                        */
                        if(parseFloat(this.product.listPrice) > 0){
                            if(parseFloat(this.discount) > parseFloat(this.product.listPrice)){
                                this.discount = this.product.listPrice.toString();
                            }
                        }
                    }


                    if(error){
                        this.errorState.setErrorMsg({
                            msg: errorMsg,
                            type: type
                        });
                    }
                }
            },
            template: `<tr>
                          <th scope="row" data-label="Category Name">
                            <div class="slds-truncate" title="categoryName">
                                {{ product.categoryName }}
                            </div>
                          </th>
                          <td data-label="Products">
                            <div class="slds-truncate" title="Products">
                                {{ product.productName }}
                            </div>
                          </td>
                          <td data-label="Post Code">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="text" class="slds-input" v-model="postcode" v-on:change ="validatePostalCode"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="List Price">
                            <div class="slds-truncate">{{ product.listPrice }}</div>
                          </td>
                          <td data-label="Discount">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="text" class="slds-input" v-model="discount" v-bind:disabled = "disable" v-on:change = "validateDiscount"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Quantity">
                            <div class="slds-truncate">
                                <div class="slds-form-element__control">
                                    <input type="number" class="slds-input" v-model="quantity" v-bind:disabled = "disable" v-on:change = "validateQuantity"/>
                                  </div>
                                </div>
                            </div>
                          </td>
                          <td data-label="Start Date">
                            <div class="slds-truncate">
                              <div class="slds-form-element__control">
                                    <input type="text" readonly @focus="openDatepicker('startDate')" v-model="startDate" class="slds-input">
                              </div>
                            </div>
                          </td>
                          <td data-label="End Date" v-if = "showEndDate">
                            <div class="slds-truncate">
                              <div class="slds-form-element__control">
                                    <input type="text" readonly @focus="openDatepicker('endDate')" v-model="endDate" class="slds-input">
                              </div>
                            </div>
                          </td>
                          <th scope="row" data-label="BillableAccount" v-if = "transfercharge">
                            <div class="slds-truncate" title="billableAccount">
                                <input-select v-bind:options = "billableaccountoptions" v-bind:selectedvalue = "billableAccountId"
                                            showlabel = "false" v-bind:disabled = "disable"
                                            defaultvalue = undefined
                                            v-on:selected="popuateBillableAccount">
                                </input-select>
                            </div>
                          </th>
                          <td scope="row" data-label="specifications" v-if = "showSpecifications">
                            <div class="slds-truncate" title="specifications">
                                <textarea class="slds-textarea" v-model="product.specifications"></textarea>
                            </div>
                          </td>
                          <td data-label="Total Amount">
                            <div class="slds-truncate">{{ totalAmount }}</div>
                          </td>
                          <td data-label="action">
                            <button class="slds-button slds-button_icon" title="Delete Product"
                                    v-on:click = "deleteProduct" v-bind:disabled = "product.hasRelatedTarif || disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#delete')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Product</span>
                            </button>&nbsp;
                            <button class="slds-button slds-button_icon" title="Transfer Charge"
                                    v-on:click = "setTransferCharge" v-bind:disabled = "disable">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#internal_share')}" />
                              </svg>
                              <span class="slds-assistive-text">Transfer Charge</span>
                            </button> &nbsp;
                            <button class="slds-button slds-button_icon" title="Add Specifications"
                                    v-on:click = "setShowSpecifications" v-bind:disabled = "disable || !showSpecificationsButton">
                              <svg class="slds-button__icon" aria-hidden="true">
                                <use xmlns:xlink="http://www.w3.org/1999/xlink"
                                     xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#note')}" />
                              </svg>
                              <span class="slds-assistive-text">Add Specifications</span>
                            </button>
                          </td>
                        </tr>`
        });
        // ADDITIONAL CHARGES LINE ITEM COMPONENT AT END
        // AUSTRIA PP COMMISSION LINE ITEM END
        // SSC-1932:Changes Ends Here
    </script>
</apex:component>
